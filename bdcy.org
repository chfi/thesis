The Graph Genetics Browser embeds BD and Cy.js, which are both written
in JS. To interact with their respective APIs, we must use PS's
Foreign Function Interface (FFI).

** PureScript's FFI
PS's FFI works by creating a JS source file with the same name
as the PS module which is going to be interfacing with the FFI, in
which we define the JS functions which we will be calling from PS.
This FFI module is imported into PS using the \verb|foreign import|
keywords, and providing type signatures for the values we import.

The type signatures are not validated, and there are no guarantees
that the FFI functions will work -- the FFI is outside the type
system. Listing [[code:bdcy-js-untyped-example]] shows an example of an
FFI function which takes two values and prints their sum. In PS, one
would normally have to make sure it makes sense to add two values
before attempting to do so, likewise when transforming some value to a
String, however JS has no such qualms.

#+caption: Unsafe function prints the result of "summing" two values, to the browser console.
#+name: code:bdcy-js-untyped-example
#+BEGIN_SRC javascript
exports.showAppend = function(a) {
    return function(b) {
        return function() {
            console.log(a + b);
        }
    }
}
#+END_SRC

JS knows nothing about the types, however when defining an FFI function
in PS, a type signature must be provided. Using the type in listing [[code:bdcy-purs-typed-example-1]]
limits using the \verb|showAppend| function on strings, and returns an effect [fn:effect-rows],
making the function pure and behave reasonably.

#+caption: A safe type signature for the function defined in listing [[code:bdcy-js-untyped-example]].
#+name: code:bdcy-purs-typed-example-1
#+BEGIN_SRC purescript
foreign import showAppend
  :: String -> String -> Eff Unit
#+END_SRC



[fn:effect-rows] The currently latest version of PureScript, version
0.11.7, uses "effect rows" to annotate what native JS effect |Eff|
functions perform. E.g. |showAppend|'s return value would be |forall
e. Eff (console :: CONSOLE | e) Unit|, the |console :: CONSOLE| bit
signifying that the JS console is used. Effect rows have been removed
from the upcoming version of PS, 0.12, and are elided in this thesis,
for that reason as well as to reduce space.



The following sections present how the FFI was used to create the
modules wrapping the BD and Cy.js APIs.




** Biodalliance
Using \verb|foreign import| it is possible to define types corresponding
to foreign data structures, as values for such a type can only be
created with the FFI. To work with BD, a foreign type corresponding to
instances of the BD browser is defined as in listing [[code:bdcy-bd-types-1]].

#+caption: The data type representing a BD browser instance.
#+NAME: code:bdcy-bd-types-1
#+BEGIN_SRC purescript :tangle yes :file BDCY.purs :prologue Imports/BDCY.purs
foreign import data Biodalliance :: Type
#+END_SRC

An FFI function to wrap the BD browser constructor is also required.
As seen in listing [[code:bdcy-bd-init]], this takes the browser
constructor, another helper function, and the BD configuration as
arguments. The output of the function is a continuation that takes an
HTML element to place the BD browser in, and returns an effectful
function which creates and returns the BD instance.

#+caption: The FFI import signature for the BD browser constructor wrapper.
#+NAME: code:bdcy-bd-init
#+BEGIN_SRC purescript
foreign import initBDimpl
  :: Fn3
     Foreign
     RenderWrapper
     BrowserConstructor
     (HTMLElement -> Eff Biodalliance)
#+END_SRC


BD can produce events, and for GGB's event system we need to be able
to attach a handlers to parse and transmit them. Listing
[[code:bdcy-bd-events-purs]] shows newtype that wraps the events from BD,
to ensure that raw event are not used in the wrong places, and an FFI
function that takes a BD instance and an effectful callback, returning
an effect that attaches the callback.

#+NAME: code:bdcy-bd-events-purs
#+caption: Type and FFI import for BD events.
#+BEGIN_SRC purescript
newtype BDEvent = BDEvent Json

foreign import addFeatureListenerImpl
  :: forall a.
     EffFn2
     Biodalliance
     (BDEvent -> Eff a)
     Unit
#+END_SRC

In listing [[code:bdcy-bd-events-purs-ffi]] the actual foreign function
definition is provided.

#+NAME: code:bdcy-bd-events-purs-ffi
#+caption: JS implementation of BD event listener function.
#+BEGIN_SRC javascript
exports.addFeatureListenerImpl = function(bd, callback) {
    bd.addFeatureListener(function(ev, feature, hit, tier) {
        callback(feature)();
    });
};
#+END_SRC

This is not the entire BD module, however the other functions are
similar. The corresponding Cy.js module follows.


** Cytoscape.js

Again, a foreign type for the Cy.js browser instance is required. We
also have types for Cy.js elements, collections, and, like BD, a newtype
wrapper for events. These types are in listing [[code:bdcy-cy-types-1]].

#+NAME: code:bdcy-cy-types-1
#+caption: Foreign types used in Cytoscape.js interface.
#+BEGIN_SRC purescript :tangle yes :file BDCY.purs :prologue Imports/BDCY.purs
foreign import data Cytoscape :: Type

-- | Cytoscape elements (Edges and Nodes)
foreign import data Element :: Type

-- | A cytoscape collection of elements
foreign import data CyCollection :: Type -> Type
#+END_SRC

The Cy.js constructor is similar to BD's. Unlike BD, as
Cy.js is provided as a dependency to GGB, we can create an instance
directly with the imported Cy.js library rather than pass the
constructory explicitly as an argument. The constructor also takes an
HTML element and an array of JSON objects to be used as the initial
graph. Listing [[code:bdcy-cytoscape]] shows the type signature for the constructor.


#+NAME: code:bdcy-cytoscape
#+caption: Type of Cy.js constructor function.
#+BEGIN_SRC purescript :tangle yes :file BDCY.purs :prologue Imports/BDCY.purs
cytoscape :: Maybe HTMLElement
          -> Maybe JArray
          -> Eff Cytoscape
#+END_SRC

The Cy.js browser instance can be worked with in various ways. Data can be
added to the graph, retrieved from it, and deleted, using the functions
shown in listing [[code:bdcy-cytoscape-graph-1]].

#+NAME: code:bdcy-cytoscape-graph-1
#+caption: Types for functions on the Cy.js graph.
#+BEGIN_SRC purescript
graphAddCollection
  :: Cytoscape
  -> CyCollection Element
  -> Eff Unit

graphGetCollection
  :: Cytoscape
  -> Eff (CyCollection Element)

graphRemoveCollection
  :: CyCollection Element
  -> Eff (CyCollection Element)
#+END_SRC

The graph layout can be controlled with the \verb|runLayout| function, see
listing [[code:bdcy-cytoscape-layout-1]], which takes a \verb|Layout| value to
update the Cy.js browser's current layout.

#+NAME: code:bdcy-cytoscape-layout-1
#+caption: Type of `runLayout`.
#+BEGIN_SRC purescript
runLayout :: Cytoscape
          -> Layout
          -> Eff Unit
#+END_SRC

\verb|Layout| is a newtype wrapper over \verb|String|, defined as in listing
[[code:bdcy-cytoscape-layout-2]], which is what the Cy.js layout
function expects. This newtype lets us easily support all the layouts
supported by Cy.js, while minimizing the risk of using a string that
does not correspond to a layout, which would cause an error at runtime.

#+NAME: code:bdcy-cytoscape-layout-2
#+caption: Layout newtype and example value.
#+BEGIN_SRC purescript
newtype Layout = Layout String
circle = Layout "circle"
#+END_SRC

Cy.js produces events in JSON format, like BD. A function to attach
event handlers, and a newtype wrapper to keep things safe, are
used in GGB; they are analogous to the BD implementations, and so
details are elided here.


Unlike BD, the Cy.js API provides a data structure for working
with collections of Cy.js elements, and functions on them.
Some of these are describe next.

*** CyCollection

The \verb|CyCollection| type is used to work with collections of
elements in the Cytoscape.js browser. As it is implemented in
PureScript as a\verb|foreign data import|, there is no way to create
values of this type without using the FFI, e.g. with
\verb|graphGetCollection|. Likewise all functions that manipulate
\verb|CyCollection| values must be implemented in terms of the FFI.

Cy.js provides functions for combining several \verb|CyCollection|s in
various ways. Listing [[code:bdcy-cytoscape-union-1]] shows the FFI
definition of the function that returns the union of two provided
collections, and listing [[code:bdcy-cytoscape-union-2]] the type
signature in the FFI import, taking the opportunity to also define
an instance of the Semigroup typeclass on \verb|CyCollection| using \verb|union|.

#+NAME: code:bdcy-cytoscape-union-1
#+caption: Foreign function wrapping the Cy.js union function on two Cy.js collections.
#+BEGIN_SRC javascript
exports.union = function(a, b) { return a.union(b) };
#+END_SRC

#+NAME: code:bdcy-cytoscape-union-2
#+caption: FFI import of union and definition of Semigroup instance on CyCollection.
#+BEGIN_SRC purescript
foreign import union
  :: forall e.
     Fn2 (CyCollection e) (CyCollection e)
         (CyCollection e)

instance semigroupCyCollection :: Semigroup (CyCollection e) where
  append = runFn2 union
#+END_SRC

Another common interaction with a collection is extracting a
subcollection. With \verb|CyCollection|, we can use the \verb|filter| function
for this, as seen in listing [[code:bdcy-cytoscape-filter-1]] (foreign
definition elided). The \verb|Predicate| type is another newtype, wrapping
functions from the given type to Boolean.

#+NAME: code:bdcy-cytoscape-filter-1
#+caption: Filter on a CyCollection.
#+BEGIN_SRC purescript
-- | Filter a collection with a predicate
filter :: forall e.
          Predicate e
       -> CyCollection e -> CyCollection e
#+END_SRC

The Cytoscape.js API provides some basic predicates on elements,
nodes, and edges. See listing [[code:bdcy-cytoscape-predicate-2]].

#+NAME: code:bdcy-cytoscape-predicate-2
#+caption: Imported predicates on Cy.js elements.
#+BEGIN_SRC purescript
foreign import isNode :: Predicate Element
foreign import isEdge :: Predicate Element
#+END_SRC


Multiple predicates can easily be combined and manipulated. By
composing a predicate on a JSON value with a function that transforms
a Cy.js element into JSON, it is easy to create new predicates on
Cy.js elements. In addition, \verb|Predicate| is also an instance of
the \verb|HeytingAlgebra| typeclass, which generalizes most of the
common boolean operations, including disjunction and conjunction.
Listing [[code:bdcy-cytoscape-predicate-3]] uses these tools to construct
complex predicates on Cy.js elements.



#+NAME: code:bdcy-cytoscape-predicate-3
#+caption: Combining predicates by composition makes it easy to construct complex filters.
#+BEGIN_SRC purescript
hasName :: Predicate Json
hasName = Predicate f
  where f json = fromMaybe false
                 $ json ^? _Object <<< ix "name"

  -- Composing a JSON-predicate with an element-to-JSON function
elemHasName :: Predicate Element
elemHasName = elementJson >$< hasName

  -- Using && and || on Predicates to combine filters
namedNodeOrEdge :: Predicate Element
namedNodeOrEdge = (elemHasName && isNode) || isEdge
#+END_SRC


The Cy.js API is considerably larger and more complex than that for BD.
To ensure correctness beyond what the types provide, the next section
briefly describes how a subset of the module is tested.


*** Tests

PS has a testing framework called \verb|purescript-spec|, which these unit
tests are written to use. The \verb|fail| function fails the test with the given
string, and the \verb|shouldEqual| function fails if the two arguments are not
equal.

\verb|CyCollection| is unit tested to help ensure that the graph
operations work as expected. Listing [[code:bdcy-cytoscape-tests-1]] shows
unit tests that provide some assurance that the set operations on
\verb|CyCollection|s behave as expected. \verb|eles| is a
\verb|CyCollection|, \verb|edges| and \verb|nodes| are the
corresponding subsets of the collection.


#+NAME: code:bdcy-cytoscape-tests-1
#+caption: Testing that the edges and nodes of a graph are subsets of the graph, and
#+BEGIN_SRC purescript
let edges = filter isEdge eles
    nodes = filter isNode eles

    -- Signal test failure if these subsets of the graph
    --  are not contained in the graph
when (not $ eles `contains` edges)
       (fail "Graph doesn't contain its edges")

when (not $ eles `contains` nodes)
       (fail "Graph doesn't contain its nodes")

   -- The union of the nodes and edges of a graph,
   -- should equal the whole graph.
(edges <> nodes) `shouldEqual` eles
(nodes <> edges) `shouldEqual` eles
(edges <> nodes) `shouldEqual` (nodes <> edges)
#+END_SRC


The properties that are tested are, first, that subsets of a
collection are, in fact, contained in the collection, and second,
if provided the nodes and edges of a collection, the collection
itself can be reconstructed.


\newpage

** Summary
Modules providing subsets of the APIs presented by BD and Cy.js
were written using PS's FFI, allowing for some degree of correctness
even when working with JS code, with additional safety created using
some unit tests in the case of the more complex parts.

The next section describes the configuration system used by GGB, and
how it is used together with the modules described in this section to
create BD and Cy.js browser instances.
