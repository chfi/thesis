

* Introduction - Present legacy code
** What is it and why do we care
Wikipedia defines "legacy system":
"In computing, a legacy system is an old method, technology, computer system, or
application program, 'of, relating to, or being a previous or outdated computer
system.' [..] This can also imply that the system is out of date or in need of
replacement."


TODO statistics on legacy systems; how pervasive are they, how old do they
     tend to be, how expensive is their maintenance and where do most of
     the costs fall

TODO sum up why it's a problem - new features, new data, security issues

TODO point out source code as one problem; not language or OS, since
     that's basically stable these days (i.e. they're unlikely to
     be replaced soon, compared to how fast things moved up until
     the 90s)

Following this, we define a "legacy codebase" to be the codebase of a
system which is "old" and "difficult" to work with. The technology itself
does not matter, only the size and complexity of the codebase itself.
Likewise we do not look at dependencies, a problem solved by pure functional
package managers such as Nix and Guix.

TODO
What remains is "legacy code".
Why is it a problem, i.e. what causes it (when the system is being
designed/built) and why does it come up (when someone wants to make
changes to the system)?
How have people attempted to solve this problem?

"The maintenance of legacy code is a hard task since developers do not have
access to details of its implementation."
http://ieeexplore.ieee.org/abstract/document/7479256/?reload=true

** Why is legacy code a problem
When someone wants to change the system. Otherwise, if it's running
smoothly and does everything everyone wants of it, there is no problem.

TODO
- security fixes
- bug fixes
- changes to external dependencies
- changed features
- new features (e.g. electronic healthcare records)


WIP Why is it difficult to do these things, to change legacy code?
WIP Nobody understands the code => the set of changes that are safe
    to make are unknown
The main reason it is difficult to work with legacy code is lack
of knowledge of the system and codebase. A lot of work is required
to discover what changes can be done without compromising the
system's current function; one must then come up with a way to
fit in the desired changes (new features, bug fixes, etc.) in
that possible implementation space.
TODO REF

WIP There is no clear specification of the design or the system
This lack of knowledge can be caused by not having a system specification,
but even if there is one, it is possible (likely?) that the system
has grown past it -- that the specification does not actually
describe the current system. A system specification does
not necessarily help understand the codebase, either.
TODO REF


WIP The system is only partly known; there is no way to test changes
Often there are few or no tests, making it difficult, if not impossible,
to be sure that a change has not caused some kind of regression.
TODO REF

WIP The existing data structures etc. can be arbitrarily complex,
     have old/unused data/fields, be mutated at various places;
     thus it is difficult to know where to start when inserting
     new code
If the system has grown organically over a longer period of time,
the data structures and procedures that manipulate them have likely
also grown to fit new features etc., leading to large pieces of
state that are difficult to reason about. Objects may be doing
something much different from their original purpose. WIP
TODO REF

WIP Some new feature/solution to a new problem may involve
     ""stuff (architecture etc.)"" that the existing code
     is difficult to fit into, or vice versa
The changes that need to be made may fundamentally be "out of phase"
with the existing system. For example, it may require data that
does exist in some part of the system, but the data is tangled
up with other state and so on.

In short, the problem is lack of knowledge in what the system does, and how the
code relates to the system and its parts. It may also be extremely difficult to
know if a change made is safe.


** How have people tried to solve it
Reverse engineering of legacy code exposed
https://doi.org/10.1145/225014.225045

"Reverse engineering of large legacy software systems generally cannot meet its
objectives because it cannot be cost-effective. [..] it is very costly to
“understand” legacy code sufficiently well to permit changes to be made safely,
because reverse engineering of legacy code is intractable in the usual
computational complexity sense."

As one of the main problems of legacy code is lack of knowledge, one
of the main ways to attempt to solve it is to reverse engineer
the existing system. This is usually done manually [TODO REF], but
can also be done using automatic analysis of the code.

*** Code analysis
One common way is to analyze the code to find ways to modularize
it, to decouple the pieces from one another. This can be done
by OOP stuff

Another interesting route is finding a modularization by constructing
a concept lattice based on where different global variables are used.
This lattice can then be used to create descriptions on how to
modularize the codebase.
REF: Assessing Modular Structure of Legacy Code Based on Mathematical
     Concept Analysis
     https://doi.org/10.1145/253228.253354

TODO Problems with these approaches, and to automation of this in general
TODO probably something about machine learning


*** Manual reverse engineering
The most common (TODO REF) solution is simply to do it by hand. This
requires that programmers look at, and comprehend, the codebase, and
how the codebase relates to the semantics of the system. Writing tests
should also be done to give greater confidence when changes are made.

REF The most common way - Do it by hand.

It's also desirable to know what makes code more or less difficult to
work with -- both to give a clearer picture of what code to focus on
when refactoring old systems, as well as give programmers guidelines
when developing new code. In a word, we want heuristics for good vs.
bad code. These are called code smells, or antipatterns.

TODO this probably needs... more
First, however, we need to define what is meant by "good" or "bad" code.
Simply, a good piece of code makes it clear what it does, how it relates
to the system at large, and how it can be changed or reused without
compromising its behavior or the behavior of the system.

TODO get Armstrong quote in here

*** Code smells
Beck & Fowler [TODO REF] provides a list of 22 code smells that have been
used (extensively?) since publication.
(TODO REFs
http://ieeexplore.ieee.org/abstract/document/1235447/
https://link.springer.com/article/10.1007/s10664-006-9002-8
https://dl.acm.org/citation.cfm?id=2629648
http://www.sciencedirect.com/science/article/pii/S0164121215000631
)

Many of the code smells they list, as well as the solutions to them, are
concerned about class-based object-oriented programming (OOP). OOP has
been the primary programming paradigm for decades (TODO REF),
WIP more here (but what?)

Some of the code smells:

**** General
- Duplicated code - when a piece of code appears multiple times
  in the codebase, it's a sign of a potential abstraction.
  It also makes it difficult to change things, as the change needs
  to be duplicated several times -- which also leads to more opportunities for mistakes to be made.


- primitive obsession - Using primitive types to represent values that could
  be better represented by composite types or wrapped types. This can
  lead to values being used where they shouldn't be (e.g. providing a
  Number representing a pixel to a function expecting a Number actually
  representing the number of objects in an array). This also makes it
  more difficult to understand what a variable or value is to the program.

- shotgun surgery -

data clumps - eh

div change (maybe?)

speculative generality - kind of interesting

**** OOP-specific

temp field - immutability, purity
lazy class - boring
parallel inheritance hierarchies - boring, shotgun surgery
middle man - boring
data class - records!!
refused bequest - boring
feature envy (getting a bunch of stuff from some other class) - boring


**** Procedural-specific
- long method -

- long parameter list

- switch statements

- msg chains

- inappropriate intimacy



**** Summary
What makes a code smell? Our definition of "good" from above
seems to fit in well with the more general of these code smells.
These code smells are generally concerned with limiting the reach
of a piece of code (fewer, more organized method parameters, shorter
methods, not touching other classes), as well as minimize

TODO something with SOLID maybe

TODO something like:
     Code whose implementation is in the neighborhood of the implementation
     space of semantically relevant extensions to the program.

     "What we want is to increase the possible implementation space without
     changing the existing implementation. By transitivity, we're not doing
     anything in PS that cannot be done in BD. What we *are* doing, is doing
     this in a way such that the new implementation is closer to the intended
     program semantics -- for some definition of "closer"."

WIP
Generally, the code smells are largely concerned with procedural
code. Mutability and side-effects are taken for granted; however,
pure functional programming (FP) has been growing in popularity, which
disallows or at least discourages functions with side-effects,
and immutable data is the norm.

*** Could FP solve this?
TODO As noted, OOP has been used both to fix as well as prevent legacy code issues,
     but has it really worked? If it has, is it the best, or even the only, way?


TODO Functional programming as (a -> b) w/o implicit state

TODO Immutability (and how it's getting more and more common outside FP)

TODO Static types -- w/ inference and powerful features

TODO Pure FP as leveraging type system to ensure purity

TODO Category theory as 70 years of documentation in pure FP languages. (Abstractions, good ones!)

TODO Result: referential transparency, program composition, more useful abstractions

TODO Reasons why it would work well (earlier "good code")

TODO Argue that FP is easier to comprehend, reason about

TODO Argue that it (often) decreases complexity vs. OOP code


While writing a program in a pure functional language, the programmer
is encouraged by the language and environment to write code that is
reusable and easy to reason about [REF Why functional programming matters].
You also get some level of program correctness, by writing code
using types that correspond to the program semantics. You're able
to construct transformations between data structures and compose
them together -- all type-checked by the compiler.

** Transformations to and from a legacy system

TODO We extend an existing system + create a new platform blah bla

TODO By identifying the key data structures and how sys. creates them & from what

TODO Provide data that sys. uses to produce desired output; kinda rev. engineering

TODO Add small hooks for new data input/transformations

TODO Goal: A system that feeds data to/from the legacy system,
           including producing modules for the legacy API,
           and will later subsume the legacy system

TODO Goal: A structured application that is both robust and easy to update and
           change

** Biodalliance - A Legacy JavaScript Application
TODO describe BD

TODO describe GN2

TODO describe my earlier work on BD: adding modular renderers

TODO describe our general goal with GGB

TODO why we want BD (file format support, ease of adoption)

TODO why we don't want BD (horrible legacy code)

TODO what we do instead:
  TODO generating renderer modules with glyphs,
  TODO generating fetching modules
  TODO wrapping BD and controlling it from external UI

** Pure web development with Purescript
TODO Purescript is a pure blah blah haskell, compiles to JS

TODO Statically typed

TODO Differences from Haskell

TODO Category theory??? maybe

TODO Good FFI - easy to wrap JS

TODO Property based testing?


** Hypothesis and evaluation
TODO Hypothesis
FROM
   Given that code smells are a cause for concern wrt. maintainability and
   extensibility of legacy code, find code smells -- ones relevant
   to the Genetics Browser work we want to do -- in the BD codebase,
   identify the problems they imply if one were to naively try to extend
   the BD codebase, then identify and present a functional solution
   using Purescript.



* Method
** TODO Our code smells
TODO list the ones we're looking at, and why (and why not others)

*** TODO Long complicated functions -- but only unnecessarily so.
maybe remove this. doesn't really apply

*** TODO Duplicated code
Duplicated code can be a sign of many potential changes and ways
to refactor the code; especially an unextracted abstraction.

It's problematic because if you find you need to make a change
to the "abstraction" or how it works, you need to make changes
in every single piece of related dupe'd code.

It also is difficult to reason about an "abstraction" that hasn't
actually been abstracted out -- it is likely that each instance
differs slightly, and the code provides no assistance in reasoning
on a higher level; you must think the lower-level data flow,
even if it's not actually semantically relevant to what the
abstraction should be doing. E.g. why should a function that
scrolls the view care about how the view is rendered (DOM etc.)
(there are probably better examples)

FP helps deduplicate code; there are plenty of abstractions to
let us compose functions and data structures to maximize reuse.


*** TODO Primitive obsession
Primitive obsession is when primitive types are used to represent
parts of the system that would be better represented as types
of their own. In JS, we don't really have types, so this is
rampant. However, even in typed languages such as Java, it is
common to e.g. represent positions as Integers or Doubles, rather
than create a type that actually represents the unit corresponding
to measurements of the value.

Purescript has many tools to create new types; the `newtype`
keyword is especially useful for this.


*** TODO Use of mutable state
TODO rewrite this paragraph

Mutable state is inherently difficult to reason about (citation needed).
Functions and objects that refer to implicit mutable state, be it global
or fields on an object, can behave differently depending on the
state of the object in question; it becomes extremely difficult
to reason about what a piece of code does, as it may depend,
in the middle of the snippet, on some obscure field; worse, it may
change some field.


*** TODO Side effects
More generally, code that performs side effects is difficult, if not
impossible, to reason about. Depending on the nature and magnitude
of the side effects, the effect and output of the code may change
immensely, even though the code itself, and even the calling code,
is the same. In short: there is no way to be certain what calling
a function with side effects does -- there is no way to be confident
that changing it, or calling it again, is safe.

Purity solves this problem.


*** TODO Difficult to make changes
code that is tightly coupled to other parts, for no apparent reason
actually this is covered by side effects, basically



*** Transformations
We want code that is free from side effects, doesn't use mutable
state unless appropriate, uses types that are appropriate for
the values they contain.

We also want code that is easy to reuse etc.

Transformations: From raw data to visualizations; from user input
to actions; from user configuration to functions.


TODO (process metrics? if there are easy ones to get from github)
TODO Where our solutions will come from (CT etc.)
TODO How we'll go about things (piece by piece)

** Graph Genetics Browser

*** TODO Specification
TODO BD
TODO Cy.js
TODO Legacy stuff
TODO New stuff


# Each of these are from their own files
*** TODO Biodalliance

*** TODO Cytoscape.js

*** TODO Units

*** TODO Rendering

*** TODO Events

*** TODO UI



* Results



* Discussion



* Appendix? SVG
