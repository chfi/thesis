Software needs to be configurable. GGB has many pieces that can and/or
need to be configured by the user, such as what data to display. There
are also functions that need to be provided from an external source,
such as the BD browser constructor.

Configuration in standard JS solutions is not safe. A problem that can
arise in JS is, if a configuration is given as a regular JS object
(i.e. a key-value map with strings as keys), and each configuration
piece is simply assigned to its respective application variable, large
amounts of (boilerplate) code need to be written to validate and
verify that the configuration object is correct. Otherwise, there is
risk of some subpiece being misconfigured, or simply missing, leading
to strange program behavior, or crashes at runtime.

In this section, we examine how configuration is done in BD, and some
problems associated with it. Next, the configuration system used in
GGB, and how it avoids those problems, is presented. The section ends
by showing how the configuration of the embedded BD and Cy.js browsers
in GGB works.


** Configuring Biodalliance

To give an idea of how configuration can take place in a legacy JS
codebase, we look at BD. BD is highly configurable, beyond which
tracks to display and how. This information is provided by the user as
a JS object, see example in listing [[code:config-bd-example]], which is
passed to the browser constructor. The constructor then takes care of
configuring the browser.

#+name: code:config-bd-example
#+caption: Slimmed down BD instance configuration.
#+BEGIN_SRC javascript
var biodalliance = new Browser({
  prefix: '../',
  fullScreen: true

  chr:        '19',
  viewStart:  30000000,
  viewEnd:    40000000,

  sources:
    [{name:
        'Genome',
      twoBitURI:
        'http://www.biodalliance.org/datasets/GRCm38/mm10.2bit',
      desc:
        'Mouse reference genome build GRCm38',
      tier_type:
        'sequence'
    }]
});
#+END_SRC

The configuration in listing [[code:config-bd-example]] configures some
basic browser functionality (the properties \verb|prefix|, which is
the relative URL for icons and such data, and \verb|fullScreen| which
controls how the browser itself is rendered); initial browser state
(\verb|chr|,
\verb|viewStart|,
\verb|viewEnd|, which together define
the chromosome and range of basepairs the browser displays at start);
and an array of track source definitions (\verb|sources|), which
define what data to show, and how. In this case there is only one
track, a mouse genome sequence fetched from the BD website.


There are many more parts of BD that can be customized, and all
options are passed in the same object. All such options are provided
as JS objects, which are then passed to various functions that e.g.
initialize of parts of the browser UI.


Since the options are used as function arguments, the specification
of the entire system configuration, including what parts of the
configuration object are used, and what values are legal, are spread
out over the definitions of all the functions that options are passed to.


Now we take a brief look at some parts of the BD initialization
process to get an idea of how the BD configuration object is used.

*** The Biodalliance initialization process

The initialization of a BD browser instance is highly complex, spread
out over many functions and thousands of lines of source code. Here we
describe the general methods used to initialize the browser state
using the provided configuration.

BD has many features which make use of data stored in the main browser
instance. Thus a large part of the initialization process consists of
initializing these fields, either by setting them to hardcoded initial
values, to values provided by the configuration, or defaults if no
option was provided.

BD makes an effort to perform some validation for some of the
configuration options. For example, in listing [[code:config-bd-init-1]]
BD ensures that the provided initial position of the browser view is a
number. If it is not, BD crashes with an appropriate error. Not that
this check requires several lines of code.

#+name: code:config-bd-init-1
#+caption: Basic validation of configuration in BD.
#+BEGIN_SRC javascript
if (opts.viewStart !== undefined &&
    typeof(opts.viewStart) !== 'number') {
    throw Error('viewStart must be an integer');
}

this.viewStart = opts.viewStart;
#+END_SRC

Other options are directly copied from the configuration object to the
browser instance, as seen in listing [[code:config-bd-init-2]]. This
introduces a risk of a user overwriting vital browser state.

#+name: code:config-bd-init-2
#+caption: Other parts of the configuration are not validated.
#+BEGIN_SRC javascript
for (var k in opts) {
    this[k] = opts[k];
}
#+END_SRC

The configuration and initialization processes of many parts of BD,
both user-facing and internal, are woven into one single process.
These processes are difficult to understand, as they conflate many
different parts of program behavior, and have far-reaching
consequences by passing options to other parts of the program without
validation. There is also not a centralized specification of what
options are valid or even what can be configured, as all parts of the
provided configuration can be used by other parts of the program, as
shown in listing [[code:config-bd-init-2]].

These are problems GGB must avoid; the next section shows how. The
configuration provided by the user is validated at the start of the
program, providing errors that make it clear what went wrong, making
it impossible to use an incomplete or incorrect configuration. The
result is a configuration object whose type is defined in a single
place; in this way there is a clear and canonical specification of the
possible configuration options, even when other parts of the program
actually perform the parsing and use the options.

** A type for browser options

In listing [[code:config-browser-type]] the type of the configuration
object used to initialize GGB is defined, i.e., the type of value that
the user-provided configuration is parsed to.

#+name: code:config-browser-type
#+caption: The `BrowserConfig` type defines the configuration options.
#+BEGIN_SRC purescript :tangle yes :file Config.purs :prologue Imports/Config.purs
newtype BrowserConfig =
  BrowserConfig
    { wrapRenderer :: RenderWrapper
    , bdRenderers :: StrMap RendererInfo
    , browser :: BrowserConstructor
    , tracks :: TracksMap
    , events :: Maybe
        { bdEventSources :: Array SourceConfig
        , cyEventSources :: Array SourceConfig
        }
    }
#+END_SRC

The exact contents of the \verb|BrowserConfig| type are not important,
what matters is that they are all PS types, and so can be used safely.
Creating a value of this type is done by parsing a user-provided
configuration, using the \verb|parseBrowserConfig| function.

The type signature, shown in in listing
[[code:config-parse-config-type-sig]], states that the function takes an
unknown (foreign) JS value, and outputs either a \verb|BrowserConfig|,
or a \verb|NonEmptyList| of \verb|ForeignError|s[fn:foreign-error].
\verb|NonEmptyList| is the type of lists that have at least one
element --- the compiler ensures that the list cannot be empty.
\verb|ForeignError| is defined by the package
\verb|purescript-foreign|[fn:foreign-url], which is a library that
provides types and functions for working with foreign data (JS
objects), including parsing them to well-typed PS values. Listing
[[code:config-F-type]] shows the definition of \verb|ForeignError|, which
simply encodes some of the things that can go wrong when parsing an
unknown JS value.


[fn:foreign-error] In `purescript-foreign`, the type alias `F a =
NonEmptyList ForeignError a` is used. The full type is used here for
clarity.

[fn:foreign-url] Available on Pursuit at \newline
https://pursuit.purescript.org/packages/purescript-foreign


#+name: code:config-parse-config-type-sig
#+caption: Type signature of function that validates a user-provided configuration object.
#+BEGIN_SRC purescript :tangle no
parseBrowserConfig
  :: Foreign
  -> Except (NonEmptyList ForeignError)
            BrowserConfig
#+END_SRC




In other words, the type of \verb|parseBrowserConfig| says that it
attempts to parse an unknown value into a browser configuration, and
that if it fails to parse the provided value, it must provide at least
one error message --- silent failure is not an option.
Implicitly, the type also states that each of the values in the
browser configuration used by the main GGB instance must be derived
and assigned in this function. It is the single source of truth, which
its BD counterpart lacks.


#+name: code:config-F-type
#+caption: The types used to encode errors when parsing.
#+BEGIN_SRC purescript :tangle no
data ForeignError =
    JSONError String
  | ErrorAtProperty String ForeignError
  | ErrorAtIndex Int ForeignError
  | TypeMismatch String String
  | ForeignError String
#+END_SRC



Listing [[code:config-parse-config-1]] shows part of the actual parsing
machinery, namely, the part that parses and validates (on a very
simple level) the BD browser constructor. In English, the name
\verb|browser|, which is later returned as part of the
\verb|parseBrowserConfig| output, is bound to the result of attempting
to read the field with key name "browser" from the JS object provided:
\verb|f| is the JS object, \verb|!| is an indexing operator from
\verb|purescript-foreign|, which fails with an \verb|ErrorAtProperty|
if the field does not exist, communicating as much to the function
caller.

If the field does exist, the next two lines ensure that it is a
function. If it is not, a \verb|ForeignError| is returned, with an
error message that the "browser" key should have been a function.


#+name: code:config-parse-config-1
#+caption: Basic validation on the provided BD constructor.
#+BEGIN_SRC purescript :tangle no
parseBrowserConfig f = do
  browser <- f ! "browser"
               >>= readTaggedWithError
                     "Function" "Error on 'browser':"
#+END_SRC


#+name: code:config-parse-config-2
#+caption: Basic validation on the provided BD constructor.
#+BEGIN_SRC purescript :tangle no
  tracks <- f ! "tracks" >>= readTracksMap
  bdRenderers <- f ! "renderers" >>= parseRenderers
  pure $ BrowserConfig
    { wrapRenderer, bdRenderers, browser, tracks, events }
#+END_SRC


Listing [[code:config-parse-config-2]] shows how two other fields are
parsed; it is done analogously to the \verb|browser| field. These
fields are somewhat more complex, and so call out to other functions
to finish the parsing. Finally, the \verb|BrowserConfig| is returned
by the function, a record wrapped in the newtype constructor defined
in listing [[code:config-browser-type]].

The parsing is done by sequencing the results of trying to parse each
of the parts, and combining them in the record. If any of the parsers
fail, the \verb|parseBrowserConfig| function returns with the
corresponding failure message. This is done by virtue of \verb|Except|
being an instance of the \verb|Monad| typeclass; the
\verb|do|-notation, including the \verb|<-| operator, are syntactic
sugar for the functions provided by the \verb|Monad| class, allowing
us to combine effectful (in this case, potentially throwing
\verb|ForeignError|s) computations[fn:applicative-parsing].


[fn:applicative-parsing] In general, it is preferable to use
Applicative parsing instead of monadic, as it can attempt to parse the
entire structure in parallel, and return /all/ errors, not just the
first. For an excellent introduction to this, see
[[https://github.com/jkachmar/purescript-validationtown]].




** Configuring Browser Data
Configuring a BD track versus a Cy.js graph are quite different tasks.
They are both provided as arrays of JSON data, but obviously have
different requirements, and are parsed and validated in different
ways.

While Cy.js supports highly complex data, graphs in GGB are currently
configured simply by providing a name and a URL from which to fetch
the elements in JSON format.

Tracks using BD, intuitively, are configured with BD configurations;
it is possible to copy the JSON that defines a track from a page using
BD, to the GGB configuration, without modification.

Because BD supports so many different types of track, data formats,
etc., GGB takes a hands-off approach to BD track configurations; the
only validation that takes place is that a track must have a name. It
is simply not feasible to perform more validation, due to the
complexity of the relevant BD code.

#+begin_comment
Thus it is
difficult to perform much validation on these track configurations,
for reasons pointed out above. One example specific to track
configurations is that numerous properties which can describe the URL
from where the track will fetch data, and what parser to use. They are
logically disjoint yet allowed by BD.

Because of this, GGB takes a hands-off approach to BD tracks, and the
only validation that takes place is that a track must have a name.
#+end_comment

\newpage

** Summary

One of the greatest problems with the configuration system in BD is
that it provides very little information as to what options do what,
or even what options are available, much less what values are legal
for what options. With an incorrect configuration, things can go wrong
in parts far from the parts of the code that manage configuration and
initialization. These ring many bells concerning the legacy code
problem of not understanding what code does, and difficulties of
predicting the consequences of code.

The configuration system provided by GGB, on the other hand, collects
all options in one place, and one type. Since it is type-checked, no
part of the program can receive an invalid value. Validation is done
in such a way that errors are discovered and reported before the
program can attempt to use any of them, preventing silent failure, or
failure in some part of the program far away from the configuration
system.

The next section continues on the theme of increasing program
correctness while staying compatible with BD, by introducing one way
of differentiating values of different units.
