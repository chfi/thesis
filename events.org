When working with connected data, we want to be able to interact with
the data in multiple ways, to explore one data set by examining
another. In the architecture of GGB, this comes down to sending events
between tracks --- when clicking on some data point in one track, an
event containing information derived from that data point is created,
and sent to other tracks that have been configured to react to those
kinds of events.

Briefly, the system consists of four parts:

1. The browser, e.g. BD, producing raw events in response to user
   interaction, in whatever format it uses
2. A track source, mapping the raw event to one used by GGB
3. A track sink, consuming GGB events into some callback that performs
   effects on...
4. ... another browser, e.g. Cy.js.

Each part of this system should also be user-configurable, and
constructed in such a way as to minimize the risk of callbacks
receiving events they cannot process. That is, we want to be able to
validate and make sure only compatible sources and sinks are hooked
together; a sort of type safety, except at runtime, not compilation
time.

The next two sections describe the events used by BD and Cy.js, what
data they contain and what requirements they entail; what GGB must
provide. Next, the reasoning behind the configuration language is
presented, followed by implementation and usage details.

** Biodalliance
BD provides several facilities for the user to add event handlers,
functions that are called when the user interacts with the browser, or
the browser performs some action. We are interested in only one,
\verb|addFeatureListener|. This function adds a handler that is called
when the user clicks on a feature, i.e. on a data point in a BD track.

It receives several parameters, but for our purposes we will only be
concerned with one, namely, the feature itself. This feature is a JS
object, and can contain any information that BD parsed from the raw
data, meaning two features can be different, and be arbitrarily
complex, yet the user can add event handlers that work with them.

** Cytoscape.js
Cy.js has a greater array of exposed interactions and event handlers
than BD, but we will, again, keep it simple. We focus on regular
clicks, and so are interested in the \verb|cy.on("click")| function,
which can be used in a similar way as BD's \verb|addFeatureListener|.

Handlers attached with \verb|cy.on()| receive numerous parameters,
including the element that caused the event, which is what we will be
using. Analogous to the "feature" provided to the BD handler, the
"target" value provided to the Cy.js handler contains the entire
element clicked on. As with BD, this can can contain arbitrary data.

Both BD and Cy.js, then, produce events with unstructured information
of arbitrary complexity --- unstructured in the sense that knowledge
of the data is required to extract information such as genomic
position from it. Even though two pieces of data may both contain
position information, there is no reason to expect the data to be
found in the same place in the respective JS objects, or be of the
same format.

** Graph Genetics Browser
GGB must be able to make use of both BD and Cy.js events, in a way
that is user-configurable. It must provide an interface that makes it
possible to describe what events consist of, i.e. what data they
contain and what they can be used for. This interface must be
universal enough to work with both BD and Cy.js, and simple enough for
users to be able to express some semantics (such as position on a
genome, or expression of some phenotype) of their JSON-encoded data.

In other words, the user must be able to describe, for example, "this
is what a position on the genome looks like", and "this is how to find
the position in a BD event". Then, a Cy.js event handler that is
configured to filter the Cy.js graph when it receives a genome
position, should do its thing when BD produces an event containing
position data.


What would this configuration interface look like? JSON is the
configuration language used elsewhere by GGB, and so is the natural
choice here. There is also the fact that the events from BD and Cy.js
are JSON objects to keep in mind.

The question then becomes, what is a good way of describing a mapping
between "raw" (i.e. untouched BD or Cy.js elements) events, and
semantically-annotated events? The answer is that it looks like a
subset of the "raw" event JSON tree, flipped on its head and shaken
somewhat.

The annotated event is a collection of key/value pairs. The
configuration for such an event is, simply, the event itself, with the
values swapped for strings annotating their eventual types. The rule
for creating such an event, given a raw event (e.g. from BD), consists
of, for each value in the annotated event, a path describing where in
the raw event said value can be found.

What the user needs to provide, then, is two JSON trees, whose values
are all strings. The structures of the trees are the same as that of
the raw event (specifically, a subset of the raw event) and that of
the annotated event. By providing what are essentially example raw
events and annotated events, the user tells GGB how to transform the
former into the latter; the semantics of this part of the system and
the configuration are, in a sense, one-to-one. The fact that JSON is
the language in both cases, makes the implementation even simpler.

The difference between the configuration and the actual events are, in
the "raw" case, that each leaf node contains the name of the
corresponding "hole" that value will fill in the annotated event, and
in the annotated case, that the leaf node contains a string with the
"type"[fn:types-unimplemented] of the value.


[fn:types-unimplemented] The word "type" is in quotes here, as there
is no correspondence between the leaf node values and PS types, nor is
there (as of yet) any kind of runtime "type"-checking implemented in
GGB.


The following sections provide more concrete configuration examples,
and detail the implementation of these JSON transformation and parsing
machinery. The implementation consists of two types,
\verb|TrackSource| and \verb|TrackSink|. The former transforms events
from browsers to GGB events, the latter handles received events on
browser tracks.


** TrackSource
The definition in PS of a the \verb|TrackSource| type can be seen in
listing [[code:events-tracksource-def]]. It is a newtype over the type of
arrays of JSON parsers to some given type \verb|a|. A \verb|Functor|
instance is derived so that we can apply functions to the output of a
TrackSource, and \verb|Semigroup| and \verb|Monoid| instances are
defined so that multiple TrackSources can be combined into one.

#+name: code:events-tracksource-def
#+caption: Definition of TrackSource.
#+BEGIN_SRC purescript :file Events.purs :prologue Imports/Events.purs
newtype TrackSource a =
  TrackSource (Array (Json -> Maybe a))

derive instance functorTrackSource
  :: Functor TrackSource

instance semigroupTrackSource
  :: Semigroup (TrackSource a) where
    append
      (TrackSource s1)
      (TrackSource s2) = TrackSource (s1 <> s2)

instance monoidTrackSource
  :: Monoid (TrackSource a) where
    mempty = TrackSource mempty
#+END_SRC

A TrackSource can be constructed by providing a parsing function.
However, we want to let the user configure track sources, and not have
to write them in PS. The configuration needed for a TrackSource is a
name, the JSON structure for the event to be produced, and the JSON
structure of the event produced by the underlying track (e.g. BD).

For parsing all this JSON, the \verb|purescript-argonaut|
package[fn:argonaut-url] was used. The next section describes how the
TrackSource event templates are parsed, and how JSON structures are
used to work with other JSON structures.


[fn:argonaut-url] Available on Pursuit at \newline
https://pursuit.purescript.org/packages/purescript-argonaut



*** Parsing templates and events

Argonaut is a library for working with JSON in PS, including
serializing and deserializing, as well as working with JSON trees. In
this case we are interested in walking arbitrary JSON trees and
transforming collections of paths.

Listing [[code:events-sourceconfig-1]] shows an example of a
\verb|SourceConfig|, which describes how to parse an event such as the
one in listing [[code:events-raw-event-1]], to the object in listing
[[code:events-parsed-event-1]].


#+name: code:events-sourceconfig-1
#+caption: Example SourceConfig, mapping a feature from BD to a range of basepairs on a chromosome.
#+BEGIN_SRC json
{
  "eventName": "range",
  "eventTemplate": { "chr": "Chr",
		                 "minPos": "Bp",
		                 "maxPos": "Bp" },
  "rawTemplate": { "segment": "chr",
		               "min": "minPos",
		               "max": "maxPos" }
}
#+END_SRC


#+name: code:events-raw-event-1
#+caption: A raw event from BD.
#+BEGIN_SRC javascript
{
  // ...
  segment: "chr11",
  min: 1241230,
  max: 1270230
  // ..
}
#+END_SRC

#+name: code:events-parsed-event-1
#+caption: A parsed event constructed using the BD event.
#+BEGIN_SRC javascript
{
  chr: "chr11",
  minPos: 1241230,
  maxPos: 1270230
}
#+END_SRC

These are simple (and real) examples, however the templates provided
can be of arbitrary depth and complexity; as mentioned earlier, the
only rule is that each leaf is a string, and that all field names are
strings as well.

To determine how to create these annotated events, we extract a list
of each of the key/value pairs in \verb|eventTemplate|, and, for each
one, we create a path to where the corresponding value will be placed
in the finished event.

Next, to find out how to transform the raw event into an annotated
one, the path to each leaf in the \verb|rawTemplate| is extracted, and
the named with the leaf node value. The result is a a mapping from
keys in the annotated event, to a path describing where in the raw
event the corresponding value can be found.



Argonaut provides functions for extracting and manipulating exactly
JSON paths like this. The JCursor type, seen in listing
[[code:events-jcursor-1]], represents a path to a point in a JSON tree, at
each step describing which key name or array index to go to next. As
an example, listing [[code:events-jcursor-2]] shows a JSON object and
accessing a deep part of the tree, and the same path as a JCursor.


#+name: code:events-jcursor-1
#+caption: JCursor definition.
#+BEGIN_SRC purescript
data JCursor
  = JIndex Int JCursor
  | JField String JCursor
  | JCursorTop
#+END_SRC


#+name: code:events-jcursor-2
#+caption: JSON tree and accessor example.
#+BEGIN_SRC javascript
let thing = { x: [{a: 0},
                  {b: {c: true}} ]};

let cIs = thing.x[1].b.c; // (cIs == c) == true

// or as a JCursor:
JField "x" (JIndex 1 (JField "b" (JField "c" JCursorTop)))
#+END_SRC


Argonaut provides the \verb|toPrims| function (type in listing
[[code:events-jcursor-5]]) for transforming a JSON object into a list of
pairs of paths to each value in the object (\verb|JsonPrim| represents
a JSON primitive value, i.e. anything that is not an array or map).
Incidentally, this is exactly what we want to do with \verb|rawTemplate|.

#+name: code:events-jcursor-5
#+caption: Creating cursors from a JSON tree.
#+BEGIN_SRC purescript
toPrims :: Json -> List (Tuple JCursor JsonPrim)
#+END_SRC

The \verb|eventTemplate| component is more complex, as it is not the
leaf value itself that is desired, but the label of the path leading
to it. In this case a step into the \verb|JCursor| structure is
required, as seen in listing [[code:events-jcursor-6]].

#+name: code:events-jcursor-6
#+caption: Grabbing the label of a leaf.
#+BEGIN_SRC purescript
insideOut :: JCursor -> JCursor

eventName :: JCursor -> Maybe String
eventName c = case insideOut cursor of
	             JField s _ -> Just s
	             _          -> Nothing
#+END_SRC


# CLEAN UP
\verb|insideOut| is a Argonaut library function that reverses a
\verb|JCursor| --- once more, a simple JSON library function is
exactly what is required to solve our problem. We also ensure that the
name is in fact a \verb|String|, returning it wrapped in \verb|Just|.
If the leaf value was some other primitive, including \verb|null|,
\verb|undefined|, etc., \verb|Nothing| is returned.


As this will be used in configuration, it is desirable to provide the
user with information on what went wrong, and a value of
\verb|Nothing| does not say much. Thus, to provide the user with
additional help when configuring, the source configurations are
validated to make sure the given JSON structures "match", and errors
are signaled using \verb|Either String| instead of \verb|Maybe|,
providing some information.

Given any value that is going to be part of the annotated event,
and all of the values we know we can get from the raw event,
the name of the first value should be among names of the latter. If not,
something is wrong, and some information can be provided to the user.

Listing [[code:events-validate-templates-1]] shows the implementation of
the template validation function. The \verb|Cursor|s are grabbed from
the result of \verb|toPrims|; the \verb|JCursor|s themselves are
unaltered.

#+name: code:events-validate-templates-1
#+caption: Validating templates.
#+BEGIN_SRC purescript :file Events.purs :prologue Imports/Events.purs
type Cursor = { cursor :: JCursor, name :: String }
type RawCursor   = Cursor
type ValueCursor = Cursor

validateTemplate :: Array RawCursor
                 -> ValueCursor
                 -> Either String ValueCursor
validateTemplate rcs vc =
  if any (\rc -> vc.name == rc.name) rcs
  then pure vc
  else throwError $ "Event property '" <> vc.name
                 <> "' is not in raw template"
#+END_SRC

To expand this to validate the array of cursors that define an
annotated event, we use the fact that \verb|Either| is an instance of
the \verb|Applicative| typeclass, and use \verb|traverse|, as in
listing [[code:events-validate-templates-3]].

In English: if our collection of templates \verb|rcs| contains a
rule explaining where in a raw event to find the desired value
at path \verb|vc| in the annotated event, return the \verb|vc|
path to the value; if not, throw an error.

#+name: code:events-validate-templates-3
#+caption: Easily expanding from one to multiple.
#+BEGIN_SRC purescript :file Events.purs :prologue Imports/Events.purs
validateTemplates :: Array RawCursor
                  -> Array ValueCursor
                  -> Either String (Array ValueCursor)
validateTemplates rcs = traverse (validateTemplate rcs)
#+END_SRC

The function tries to validate all given templates, and returns the
first failure if there are any; we get validation of a collection of
things practically for free. The TrackSink concept, and its type,
\verb|TrackSink|, was implemented using similar tools, and is detailed
next.


** TrackSink

TrackSinks are configured by providing an event name and a callback.
On the PS side, these are type-safe, but there is no way to ensure
that functions passed from JS to PS are type-safe. BD and Cy.js
TrackSinks, respectively, should have the types in listing
[[code:events-tracksinks-1]].

#+name: code:events-tracksinks-1
#+caption: TrackSink types.
#+BEGIN_SRC purescript
newtype TrackSink a =
  TrackSink (StrMap (Json -> a))

type BDTrackSink =
  TrackSink (Biodalliance -> Eff Unit)
type CyTrackSink = TrackSink (Cytoscape -> Eff Unit)
#+END_SRC

The event name is used to place the function in the correct index of
the \verb|StrMap|. The callback uses currying to take both the event (as
JSON) and the respective browser instance, to be used e.g. when
scrolling the Biodalliance view to an event.

In listing [[code:events-tracksinks-3]] a BD TrackSink is defined that
scrolls the BD viewport upon receiving an event.

#+name: code:events-tracksinks-3
#+caption: BD track sinks for moving viewport when receiving event with location data.
#+BEGIN_SRC javascript
var bdConsumeLoc = function(json) {
    return function(bd) {
        return function() {
            bd.setLocation(
              json.chr,
              json.pos - 1000000.0,
              json.pos + 1000000.0);
        };
    };
};

var bdTrackSinkConfig =
  [ { eventName: "location",
      eventFun: bdConsumeLoc } ];
#+END_SRC

These functions can be provided to GGB when configuring it. The next
section describes how they actually are used to allow communication
and interaction.

** Using TrackSource and TrackSink

For TrackSource and TrackSink to be usable we need to be able to
create them from the provided configurations, and provide functions
for applying them to events as appropriate.

*** TrackSource

To create a TrackSource, the provided templates are parsed and
validated. Since a TrackSource is a list of parsers, if the
SourceConfig is correct, a function from raw events to parsed events
is returned, wrapped in a list and the TrackSource type, as seen in
listing [[code:events-running-1]].

#+name: code:events-running-1
#+caption: Function for creating a TrackSource from a SourceConfig.
#+BEGIN_SRC purescript
makeTrackSource :: SourceConfig
                -> Either String (TrackSource Event)
makeTrackSource sc = do
  rawTemplates <- parseRawTemplateConfig sc.rawTemplate
  eventTemplates <- validateTemplates rawTemplates
                    =<< parseTemplateConfig sc.eventTemplate

  pure $ TrackSource $ singleton $ \rawEvent -> do
    vals <- parseRawEvent rawTemplates rawEvent
    evData <- fillTemplate eventTemplates vals
    pure $ { name: sc.eventName, evData }
#+END_SRC

To extend the above function to work on a collection of configuration
objects, function composition is used in listing
[[code:events-running-2]] to first attempt to use each provided
configuration to create a TrackSource, followed by combining the list
of parsers into a single one.

#+name: code:events-running-2
#+caption: Creating a TrackSource from multiple configurations.
#+BEGIN_SRC purescript
makeTrackSources :: Array SourceConfig
                 -> Either String (TrackSource Event)
makeTrackSources =
  map fold <<< traverse makeTrackSource
#+END_SRC

First \verb|traverse| is used to try to create the TrackSources, which
returns an array of \verb|TrackSource Event| if all were legal, or an
error if something went wrong. Next, \verb|map| is used to apply a
function to the \verb|Right| side of the \verb|Either| from the use of
\verb|traverse|, and the applied function is \verb|fold|, which
concatenates a collection of values of some monoid into a single value
-- the monoid in question is TrackSource.

This is not the only reasonable way of defining this function -- one
may very well want to collect the error messages while returning the
successes. As \verb|makeTrackSources| demonstrates, not much code is
needed to compose functions to provide the validation logic that is
desired, and there is nothing unique about this function; all that is
required is swapping out some of the functions.


Finally, a way to use a TrackSource, to parse a raw event, is
required. Listing [[code:events-running-3]] shows the function that
does so.
#+name: code:events-running-3
#+caption: Function for parsing a raw event with a TrackSource.
#+BEGIN_SRC purescript
runTrackSource :: TrackSource Event
               -> Json
               -> Array Event
runTrackSource (TrackSource ts) raw =
  filterMap (_ $ raw) ts
#+END_SRC

It works by applying each function in the array wrapped by TrackSource
to the provided value, filtering out the \verb|Nothing|s and returning
an array of successfully parsed \verb|Events|.

*** TrackSink

A TrackSink is a map from event names to a function that handles the
event, so to make one we create a singleton map from the provided
event name to the provided function, and wrap it in the TrackSink
type, shown in listing [[code:events-running-4]].

#+name: code:events-running-4
#+caption: Creating a TrackSink from a sink configuration.
#+BEGIN_SRC purescript
makeTrackSink :: SinkConfig
              ~> TrackSink
makeTrackSink sc =
  TrackSink
    $ StrMap.singleton sc.eventName sc.eventFun
#+END_SRC


Using a collection of \verb|SinkConfigs| to produce a single TrackSink
is not in itself complicated; see the code is in listing
[[code:events-running-5]]. The bulk of the logic is in validation, namely
ensuring that there are not multiple handlers for a given event:

#+name: code:events-running-5
#+caption: Validating and creating a TrackSink from multiple configurations.
#+BEGIN_SRC purescript
makeTrackSinks :: forall a.
                  Array (SinkConfig a)
               -> Either String (TrackSink a)
makeTrackSinks scs = do
  let count =
        StrMap.fromFoldableWith (+)
          $ map (\c -> Tuple c.eventName 1) scs

      overlapping =
        StrMap.filter (_ > 1) count

  when (not StrMap.isEmpty overlapping)
    let error = foldMap (append "\n" <<< show)
                  $ StrMap.keys overlapping
    in throwError $ "Overlapping tracksinks!\n" <> error

  pure $ foldMap makeTrackSink scs
  #+END_SRC

In this case, we use \verb|foldMap| to map the \verb|makeTrackSink|
function over the provided configurations, and then use the
\verb|TrackSink| monoid instance to combine them -- similar to
\verb|fold <<< traverse| in the case of TrackSource.

To use a TrackSink, we see if a handler for the provided event exists.
If it does, we apply it to the contents of the event. The function is
defined in listing [[code:events-running-6]].

#+name: code:events-running-6
#+caption: Function to choose function to run when a TrackSink receives an event.
#+BEGIN_SRC purescript
runTrackSink :: forall a.
                TrackSink a
             -> Event
             -> Maybe a
runTrackSink (TrackSink sink) event = do
  f <- StrMap.lookup event.name sink
  pure $ f event.evData
#+END_SRC

However, since TrackSinks are intended to perform effects, a helper
function for that is useful. In particular, the function
\verb|forkTrackSink| in listing [[code:events-running-7]] asynchronously
reads from a message bus, running effectful functions from the
provided TrackSink if the received event has a handler.


#+name: code:events-running-7
#+caption: Helper function for running functions when receiving asynchronous events on a bus.
#+BEGIN_SRC purescript
forkTrackSink :: forall env.
                 TrackSink (env -> Eff Unit)
              -> env
              -> BusRW Event
              -> Aff Canceler
forkTrackSink sink env bus =
  forkAff $ forever do
    event <- Bus.read bus

    case runTrackSink sink event of
      Nothing -> pure unit
      Just f  -> liftEff $ f env
#+END_SRC

\newpage

** Summary

TrackSource and TrackSink provide highly general ways of defining
interactions between different parts of GGB. They are easily
configured in a declarative manner by providing JSON templates, and
there is a good degree of verification on their configuration.

In the next section, we finish our tour through the codebase of GGB by
looking at how all these pieces fit together when creating a UI.
