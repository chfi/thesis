# * Glyphs

# Say that rendering data to the screen is obviously important for a viz. tool

# then, since users must be able to interact with the data, it must be
# possible to know where they end up on the screen, so we can map from
# clicked screen coordinates to feature.

# tie these concepts up by presenting them as parallel transformations
# on a single data type that features are transformed to: the Glyph

# maybe have a chart showing it,
# pointing out that the transformations *from* Glyph are data-agnostic;
# they are free if we can provide a way to transform the data to a Glyph

#+begin_comment

  Data-specific
    transformation               -> SVG
                 \              /
            Data -> Glyph - - - -> HTML5 Canvas
                            /   \
                Data-agnostic    -> Bounding Box
                   transformation

#+end_comment

This section concerns transforming data, e.g. values of the `Feature`
type defined in the previous section, to representations that can
be rendered to the screen, SVG, etc. In a word, transforming it
to something useful to the user. First BD's solution is presented,
and why it is difficult to work with.

The solution used by GGB is then presented, beginning with examining
what the core of the problem is. A system to work with these
transformations in the abstract is created, finally this system is
then to perform all of the desired transformations in a modular
and extensible manner.


** Biodalliance


In BD, a "glyph" is something that can be drawn to the browser screen,
as well as be exported to SVG. They are also what the user interacts
with, and so have bounding boxes that are used to detect whether the
user has clicked on them, to produce browser events. BD has a number
of Glyphs, each of which is a class providing a basic interface:

+ a method to draw the glyph to a canvas
+ a method to produce an SVG element of the glyph
+ methods for determining the bounding box of the glyph

The glyphs range from basic geometric shapes such as boxes and
triangles, to more complex ones that work with other glyphs, e.g. a
glyph that translates one or more glyphs. As glyphs are classes, each
has their own constructor which takes the arguments required to define
the glyph, such as position on screen, line and fill color, etc.

For clarity, we now take a closer look at the `BoxGlyph`, whose
shape is obvious. Listing [[code:glyph-bd-1]] shows its constructor,
which simply uses the parameters to set the corresponding fields
on the instantiated glyph.

#+name: code:glyph-bd-1
#+caption: The creation of a box glyph.
#+BEGIN_SRC javascript
function BoxGlyph(x, y,
                  width, height,
                  fill, stroke,
                  alpha, radius) {
    this.x = x;
    this.y = y;
    this._width = width;
    this._height = height;
    this.fill = fill;
    this.stroke = stroke;
    this._alpha = alpha;
    this._radius = radius || 0;
}
#+END_SRC

These fields are then used in the other methods. Listing
[[code:glyph-bd-2]] shows a slimmed down version of the method that draws
a `BoxGlyph` to a provided HTML5 canvas. The data in the glyph is used
when performing a set of canvas drawing instructions.

# TODO this one needs to be reformatted Done?
#+name: code:glyph-bd-2
#+caption: Basic method to draw a glyph to a canvas.
#+BEGIN_SRC javascript
BoxGlyph.prototype.draw = function(g) {
    g.strokeStyle = this.stroke;
    g.lineWidth = 0.5;
    g.strokeRect(this.x, this.y,
                 this._width,
                 this._height)
}
#+END_SRC

# WIP .toSVG() using thin wrapper around DOM API
Another method supported by glyphs is exporting to SVG, the `toSVG` method.
Listing [[code:glyph-bd-3]] shows the `BoxGlyph.toSVG` method. As expected,
the glyph data is used to create an appropriate SVG element.

#+name: code:glyph-bd-3
#+caption: Method to create an SVG element from a box.
#+BEGIN_SRC javascript
BoxGlyph.prototype.toSVG = function() {
    var s = makeElementNS(NS_SVG, 'rect', null,
                         {x: this.x,
                          y: this.y,
                          width: this._width,
                          height: this._height,
                          stroke: this.stroke || 'none',
                          strokeWidth: 0.5,
                          fill: this.fill || 'none'});

    if (this._alpha != null) {
        s.setAttribute('opacity', this._alpha);
    }

    return s;
}
#+END_SRC

# WIP .min(), .max(), .height(), minY(), maxY()
The methods for determining the bounding box of a glyph are less
obvious, as shown in listing [[code:glyph-bd-4]]. These are used for
determining whether the user has clicked on a glyph. The methods are
all constant functions, which lets different glyphs calculate their
bounding boxes in different ways. However they are limited to
axis-aligned bounding boxes.

#+name: code:glyph-bd-4
#+caption: Bounding box-related methods on the box glyph.
#+BEGIN_SRC javascript
BoxGlyph.prototype.min = function() {
    return this.x;
}

BoxGlyph.prototype.max = function() {
    return this.x + this._width;
}

BoxGlyph.prototype.height = function() {
    return this.y + this._height;
}
#+END_SRC



# WIP problems: difficult to create new glyphs,
#              difficult to add new glyphs to rendering system
A problem with this way of creating and working with glyphs is that it
necessarily requires large amounts of duplicated code. Basic canvas
instructions, SVG elements, and bounding boxes must be written for
every glyph, of which there are dozens in BD. There is also simple way
of combining existing glyphs; the best one can do is pass around
multiple glyphs and call their respective functions one after another,
and writing functions to combine bounding boxes. Conversely, adding a
new glyph transformation requires modifying every single existing
glyph, separately.


This is a problem to be avoided in GGB. A single
interpretation-agnostic way of creating glyphs is created, in such a
way that glyphs can be composed to create new glyphs --- in other
words, a simple domain specific language for glyphs. Interpreters for
this language are then written to draw these glyphs to the canvas, SVG
elements, and more. Best of all, pure FP and PS provide the tools
to make this quite simple.

# WIP solution: Free monads and code generation!

** Glyphs in the Graph Genetics Browser

First, the type representing glyphs is presented. Next, the `Free"

We require some types to represent our glyphs. Listing
[[code:glyph-ggb-1]] show these, a simple `Point` type representing a
point in 2D space, and the `GlyphF` type which contains the commands
in our DSL for constructing glyphs. We also derive a `Functor`
instance for `GlyphF`. This is important, because our DSL is in fact
the Free monad of this `GlyphF` functor.

#+name: code:glyph-ggb-1
#+caption: Type definitions for our glyphs.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
type Point = { x :: Number, y :: Number }

data GlyphF a =
    Circle Point Number a
  | Line Point Point a
  | Rect Point Point a
  | Stroke String a
  | Fill String a
  | Path (Array Point) a

derive instance functorGlyph :: Functor GlyphF
#+END_SRC

The Free monad is named so because it is the monad that arises from
any functor. A naive implementation (which works in Haskell thanks to
non-strict evaluation, but not PS) is given in listing
[[code:glyph-ggb-3]]. Intuitively, especially when using it to create
DSLs, it can be thought of as a list of commands to perform, where the
commands are defined by the underlying functor. This list of commands
can be used by interpreting it into some other functor.

#+name: code:glyph-ggb-3
#+caption: Naive implementation of the Free monad.
#+BEGIN_SRC haskell
data Free f a = Pure a
              | Bind f (Free f a)
#+END_SRC

# NOTE: this is probably overkill; especially the stuff with ((,) a)
# Here, `f` is the underlying functor, and `a` is whatever value we want to return.
# `Free` provides two value constructors; one containing only a single value (equivalent
# to the `pure` function in the Applicative typeclass), the other containing a value
# in our underlying functor, which in turn contains the next "step" in the computation
# in the Free monad. The Free monad can be seen as a list of commands in a DSL,
# where said DSL is defined entirely in the underlying functor. Another way of
# looking at it is as a list of functors. In fact, if the underlying functor
# is `(,) a`, that is, the type of two-element pairs where the first element is
# of some type `a`, we have a type that is isomorphic to a regular list.


# #+name: code:glyph-ggb-4
# #+caption:
# #+BEGIN_SRC haskell
# type List a = Free ((,) a) ()

# [1,2,3] ~ Bind (1,
#              Bind (2,
#                 Bind (3, (Pure ()))))
# #+END_SRC

# The Purescript definition of Free is more complicated, so as to be stack-safe in
# a strict language. However, the rest of the code is in Purescript.


First, however, we need to finish the DSL. First we wrap our `GlyphF`
functor in `Free`, with a type synonym to make things cleaner,
in listing [[code:glyph-ggb-5]].

#+name: code:glyph-ggb-5
#+caption: The Free monad on GlyphF.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
type Glyph = Free GlyphF
#+END_SRC

# #+name: code:glyph-ggb-6
# #+caption: The
# #+BEGIN_SRC purescript
# liftF :: forall f a. f a ~> Free f a
# #+END_SRC

Next we "lift" the value constructors of `GlyphF` into the Free monad
DSL. A subset of the commands are given in [[code:glyph-ggb-7]], and the
rest are exactly analogous.

#+name: code:glyph-ggb-7
#+caption: Some of the lifted functions in our DSL.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
circle :: Point -> Number -> Glyph Unit
circle p r = liftF $ Circle p r unit

line :: Point -> Point -> Glyph Unit
line p1 p2 = liftF $ Line p1 p2 unit

stroke :: String -> Glyph Unit
stroke c = liftF $ Stroke c unit

-- ..
#+END_SRC

Now we have a number of functions which produce values in our DSL,
and can easily create and combine glyphs with it. As an example, in
code block [[code:glyph-ggb-8]] we create a simple glyph consisting of
a red `X` over a black circle.

#+name: code:glyph-ggb-8
#+caption: A simple glyph in our DSL.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
crossedOut :: Point -> Number -> Glyph Unit
crossedOut p@{x,y} r = do
  stroke "black"
  circle p r
  stroke "red"
  line {x:x-r, y:y-r} {x:x+r, y:y+r}
  line {x:x-r, y:y+r} {x:x+r, y:y-r}
#+END_SRC

Note that this glyph is entirely abstract; it is a syntax tree
representing the action of constructing the glyph. The interesting
part lies in interpreting this data structure, in transforming it into
another data structure, especially one that performs effects. In fact,
an interpreter consists of a natural transformation from the `GlyphF`
functor to some other functor.

It is time to look at such an interpreter. We begin with a simple one
that transforms a `Glyph` into a string.

** Logging Glyphs

Before writing an interpreter, let us look at how to run one. We do so
with `foldFree`, the type signature for which is in [[code:glyph-log-1]].
It takes a natural transformation from our DSL functor to the target
functor. That is, an interpreter cannot touch the contents of the
functor; it cannot look beyond the current instruction in the DSL.

# TODO this one needs to be reformatted
#+name: code:glyph-log-1
#+caption: Type signature for function that runs interpreters.
#+BEGIN_SRC purescript
foldFree :: forall f m.
            MonadRec m
         => (f ~> m)
         -> (Free f)
         ~> m
#+END_SRC

# TODO this is probably overly granular
# The `MonadRec` constraint ensures that only monads supporting tail recursion can be
# used. Without it stack safety would be a problem. The type operator ~> denotes a
# natural transformation, it has the same meaning as:
# #+name: code:glyph-log-2
# #+caption:
# #+BEGIN_SRC purescript
# forall a. f a -> g a
# #+END_SRC

If we want to produce a string, we need to find a monad that has the
effect of doing so. The Writer monad is a natural fit, and
conveniently also has a MonadRec instance, and so can be used with `foldFree`.
The type of the glyph-to-string interpreter is given in listing [[code:glyph-log-3]].

#+name: code:glyph-log-3
#+caption: This interpreter performs its actions by producing strings, appended by Writer.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
glyphLogN :: GlyphF ~> Writer String
#+END_SRC


Listing [[code:glyph-log-4]] shows a subset of the function body. For each
glyph primitive, it writes an appropriate string, and return the contents
of the functor, which is the next "step" in our glyph "program".

#+name: code:glyph-log-4
#+caption: Interpreting glyphs into strings.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
glyphLogN (Stroke c a)   = do
  tell $ "Set stroke style to " <> c
  pure a

glyphLogN (Circle p r a) = do
  tell $ "Drawing circle at ("
      <> show p.x <> ", "
      <> show p.y
      <> ") with radius "
      <> show r <> "."
  pure a
#+END_SRC


# this one is just to make the code compile; not exported to latex/PDF
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs :exports none
glyphLogN (Line _ _ a) = pure a
glyphLogN (Rect _ _ a) = pure a
glyphLogN (Fill _ a) = pure a
glyphLogN (Path _ a) = pure a
#+END_SRC


Running the interpreter consists of applying this natural
transformation using foldFree, then getting the resulting String from
the Writer. The function `showGlyph` in listing [[code:glyph-log-5]]
nearly writes itself at this point.

# #+name: code:glyph-execWriter
# #+caption:
# #+BEGIN_SRC purescript
# execWriter :: forall w a. Writer w a -> w
# #+END_SRC

#+name: code:glyph-log-5
#+caption: Function transforming arbitrary glyphs to strings.
#+BEGIN_SRC purescript :file Glyph.purs :prologue Imports/Glyph.purs
showGlyph :: forall a. Glyph a -> String
showGlyph = execWriter <<< foldFree glyphLogN
#+END_SRC

As an example, logging the process of drawing the previously defined
`crossedOut` glyph at the point `{ x: 40.0, y: 10.0 }` with radius
`3.0` would produce the output seen in listing [[code:glyph-log-6]].

#+name: code:glyph-log-6
#+caption: Output of logging an example glyph.
#+BEGIN_SRC text
Drawing circle at (40.0, 10.0) with radius 3.0
Drawing line from (37.0, 7.0) to (43.0, 13.0)
Drawing line from (37.0, 13.0) to (43.0, 7.0)
#+END_SRC


All that remains now is writing more interpreters. First, the
graphical ones, for canvas and SVG display.


** Drawing Glyphs

When drawing to canvas, we use Eff as the target for our natural
transformation. Interpretation is done by performing the appropriate
canvas effects, see listing [[code:glyph-draw-1]]. `glyphEffN` is then
used in `renderGlyph`, in listing [[code:glyph-draw-2]], to interpret an
entire `Glyph` structure into a canvas instruction.

# Code can be found [[https://github.com/chfi/purescript-genetics-browser/blob/3370abca91d66363966447dc5948d6fa133cd579/src/Genetics/Browser/GlyphF/Canvas.purs][on Github]].

# #+name: code:glyph-canvas-imports
# #+caption:
# #+BEGIN_SRC purescript :file GlyphCanvas.purs :prologue Imports/GlyphCanvas.purs
# import Graphics.Canvas as C
# import Graphics.Canvas (CANVAS, Context2D)
# #+END_SRC

#+name: code:glyph-draw-1
#+caption: Subset of the canvas interpreter.
#+BEGIN_SRC purescript :file GlyphCanvas.purs :prologue Imports/GlyphCanvas.purs
glyphEffN :: forall eff.
             Context2D
          -> GlyphF
          ~> Eff (canvas :: CANVAS | eff)
glyphEffN ctx (Stroke c a) = do
  _ <- C.setStrokeStyle c ctx
  pure a
glyphEffN ctx (Circle p r a) = do
  _ <- C.beginPath ctx
  _ <- C.arc ctx { x: p.x
                 , y: p.y
                 , r: r
                 , start: 0.0
                 , end: 2.0 * Math.pi
                 }
  _ <- C.stroke ctx
  _ <- C.fill ctx
  pure a
-- ..
#+END_SRC

# Again, only to make the code compile
#+BEGIN_SRC purescript :file GlyphCanvas.purs :prologue Imports/GlyphCanvas.purs :exports none
glyphEffN _ (Line _ _ a) = pure a
glyphEffN _ (Rect _ _ a) = pure a
glyphEffN _ (Fill _ a) = pure a
glyphEffN _ (Path _ a) = pure a
#+END_SRC



#+name: code:glyph-draw-2
#+caption: Function for drawing arbitrary glyphs to an HTML canvas.
#+BEGIN_SRC purescript :file GlyphCanvas.purs :prologue Imports/GlyphCanvas.purs
renderGlyph :: forall eff.
               Context2D
            -> Glyph
            ~> Eff (canvas :: CANVAS | eff)
renderGlyph = foldFree <<< glyphEffN
#+END_SRC

# TODO expand on this (pure representation of SVG elements) (or remove)
SVG on the other hand interprets `Glyphs` into the `SVG` type, a monad
transformer stack defined in listing [[code:glyph-draw-3]].


# #+name: code:glyph-svg-imports
# #+caption:
# #+BEGIN_SRC purescript :file GlyphSVG.purs :prologue Imports/GlyphCanvas.purs
# import Graphics.SVG (SVG, SVGElement)
# import Graphics.SVG as SVG
# #+END_SRC

# #+BEGIN_SRC purescript :file GlyphSVG.purs :prologue Imports/GlyphCanvas.purs :exports none
# import DOM (DOM)
# import DOM.Node.Types (Element)
# import Control.Monad.State (runStateT)
# #+END_SRC

#+name: code:glyph-draw-3
#+caption: SVGs are constructed by appending elements; creating a new element depends on some SVG state.
#+BEGIN_SRC purescript
type SVG a =
  StateT SVGContext
    (Writer (Array SVGElement)) a
#+END_SRC

The result is a series of commands which can be used to produce the desired
SVG element. The interpreter is in listing [[code:glyph-draw-4]], and is
very similar to the HTML canvas interpreter in listing [[code:glyph-draw-1]].


# TODO this one needs to be reformatted
#+name: code:glyph-draw-4
#+caption: Glyph to SVG interpreter.
#+BEGIN_SRC purescript :file GlyphSVG.purs :prologue Imports/GlyphCanvas.purs
interpSVGEff :: GlyphF ~> SVG
interpSVGEff (Stroke c a)  = do
  SVG.setStrokeStyle c
  pure a
interpSVGEff (Circle p r a) = do
  SVG.circle p.x p.y r
  pure a
-- ..
#+END_SRC


# Again, only to make the code compile
#+BEGIN_SRC purescript :file GlyphSVG.purs :prologue Imports/GlyphCanvas.purs :exports none
interpSVGEff (Line _ _ a) = pure a
interpSVGEff (Rect _ _ a) = pure a
interpSVGEff (Fill _ a)   = pure a
interpSVGEff (Path _ a)   = pure a
#+END_SRC

The interpreter is used in listing [[code:glyph-draw-5]], first to map
`Glyphs` to pure SVG elements, then to render the SVG elements using
the DOM.

#+name: code:glyph-draw-5
#+caption: Functions for creating SVG elements from glyphs.
#+BEGIN_SRC purescript :file GlyphSVG.purs :prologue Imports/GlyphCanvas.purs :exports none
runSVGEff :: forall a.
             Glyph a
          -> Array SVGElement
runSVGEff =
  execWriter
    <<< flip runStateT SVG.initialSVG
    <<< foldFree interpSVGEff

renderGlyph :: forall a eff.
               Glyph a
            -> Eff ( dom :: DOM | eff ) Element
renderGlyph = SVG.renderSVG <<< runSVGEff
#+END_SRC


Only one part of the puzzle remains, namely producing bounding
boxes for glyphs.


** The Bounds of Glyphs

BD produces events when clicking on glyphs, events that GGB makes use
of. To do this, BD expects four constant functions on each glyph. In
PS, the "bounding box" type would look like the type `BoundingBox` in
listing [[code:glyph-bounding-box-1]]. Since `BoundingBox` is a record,
it has the exact same runtime representation that BD expects.

#+name: code:glyph-bounding-box-1
#+caption: The BD bounding box type in PS
#+BEGIN_SRC purescript
type BoundingBox =
  { min :: Unit -> Number
  , max :: Unit -> Number
  , minY :: Unit -> Number
  , maxY :: Unit -> Number }
#+END_SRC

When constructing glyphs in BD, each new glyph provides its own
explicit bounding box. This is clearly insufficient for our purposes;
instead, we make use of the fact that bounding boxes form a semigroup,
and in fact also a monoid. A brief introduction of these concepts
follows.

*** Semigroups and Monoids
# TODO: <> can be rendered nice in latex, look that up
Semigroups and monoids are concepts from abstract algebra and category theory,
however they are immensely useful in pure FP, as they appear in many different
areas.

A semigroup is an algebraic structure consisting of a set together with an
associative binary operation. Let `S` be the set in question and `x`, `y`, `z`
any three elements from `S`, with the binary operation `<>`. If this following
law is true, we have a semigroup:

$Associativity: (x <> y) <> z == x <> (y <> z)$

# TODO use fancy N for natural numbers
Semigroups can intuitively be viewed as things that can be "appended" to each
other. For example, arrays, lists, and strings are semigroups, with the binary operation
being appending the two arguments. Another example is the natural numbers
with addition as the operation.

A monoid is a semigroup with one special element, an identity. The example from
above is a monoid if there is an element `e` in `S` such that these laws apply
for all elements `x` in `S`:

$Left identity:   x <> e == x$
$Right identity:  e <> x == x$

Again, arrays, lists, and strings are monoids, where the identity element is
the empty array/list/string. The natural numbers with addition form a monoid only if
zero is counted among the naturals; without zero, it is only a semigroup.
# TODO another example of semigroup but not monoid? NonEmpty?

With these definitions we can explore how bounding boxes form a monoid.

*** Monoidal Bounding Boxes
# TODO: ref to monoids and diagrams functional pearl

The type corresponding to a glyph's position is `GlyphPosition` in
listing [[code:glyph-bounding-box-2]]; a record keeping track of the
four edges of the box.

#+name: code:glyph-bounding-box-2
#+caption: Newtype wrapper for bounding boxes.
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
newtype GlyphPosition =
  GlyphPosition { min :: Number
                , max :: Number
                , minY :: Number
                , maxY :: Number
                }
#+END_SRC

# TODO this reasoning could be cleaned up; go at it more constructively.
`GlyphPosition` is a semigroup, where the binary operation produces
the minimal bounding box that covers both inputs. That is, we take the
minimum or maximum of the respective values, to get whichever
maximizes the area covered. The semigroup instance is shown
in listing [[code:glyph-bounding-box-3]].

#+name: code:glyph-bounding-box-3
#+caption: How to append bounding boxes.
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
instance semigroupGlyphPosition
  :: Semigroup GlyphPosition where
    append (GlyphPosition p1)
           (GlyphPosition p2) =
      GlyphPosition
        { min:  Math.min p1.min  p2.min
        , max:  Math.max p1.max  p2.max
        , minY: Math.min p1.minY p2.minY
        , maxY: Math.max p1.maxY p2.maxY
        }
#+END_SRC

Note the use of the the minimum and maximum functions from the Math
module, and how they're really doing all the heavy lifting. For
`GlyphPosition` to be a monoid, we require an identity element. We can
use the fact that the semigroup instance uses `min` and `max` as a
hint. While there is no minimum or maximum real number,
# TODO: add footnote about floating point inaccuracies... would also be better off using Maybe
we can cheat and use positive and negative infinity, which exist in
JS, giving us the identities in listing [[code:glyph-bounding-box-4]].

#+name: code:glyph-bounding-box-4
#+caption: Identities on min and max using infinity.
#+BEGIN_SRC purescript
forall x. Math.min x  infinity == x
forall x. Math.max x -infinity == x
#+END_SRC

Now the identity `GlyphPosition` is easily defined by setting the
minimum sides to positive infinity, and the maximum sides to negative
infinity, as in listing [[code:glyph-bounding-box-5]].

#+name: code:glyph-bounding-box-5
#+caption: The identity of bounding boxes.
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
instance monoidGlyphPosition
  :: Monoid GlyphPosition where
    mempty =
      GlyphPosition { min:    infinity
                    , max:  (-infinity)
                    , minY:   infinity
                    , maxY: (-infinity)
                    }
#+END_SRC


Now, with our `Monoid` instance in hand, we can write another
interpreter for Glyph, using Writer as our monad in the natural
transformation, see listing [[code:glyph-bounding-box-6]].

#+name: code:glyph-bounding-box-6
#+caption: The bounding box interpreter.
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
glyphPosN :: GlyphF ~> Writer GlyphPosition
glyphPosN (Stroke _ a) = pure a
glyphPosN (Circle p r a) = do
  tell $ GlyphPosition { min: p.x - (r * 1.5)
                       , max: p.x + (r * 1.5)
                       , minY: p.y - (r * 1.5)
                       , maxY: p.y + (r * 1.5)
                       }
  pure a
-- ..
#+END_SRC

# for the compiler
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
glyphPosN (Line _ _ a) = pure a
glyphPosN (Rect _ _ a) = pure a
glyphPosN (Fill _ a)   = pure a
glyphPosN (Path _ a)   = pure a
#+END_SRC

Finally, in listing [[code:glyph-bounding-box-7]] this interpreter is used
exactly as the previous Writer-based interpreters were.

#+name: code:glyph-bounding-box-7
#+caption: Function for extracting the bounding box from an arbitrary glyph.
#+BEGIN_SRC purescript :file GlyphBB.purs :prologue Imports/GlyphBB.purs :exports none
glyphToGlyphPosition :: forall a.
                        Glyph a
                     -> GlyphPosition
glyphToGlyphPosition =
  execWriter <<< foldFree glyphPosN
#+END_SRC

Now bounding boxes come for free with all `Glyphs`, and we have the
tools required to create glyphs compatible with BD. First, however, it
would be good to ensure that it actually is a semigroup and monoid we
have created, by testing it.

*** Testing our monoid

Semigroups and monoids have laws, and in PS there are tools for
testing such laws. To do this, the package purescript-jack is used,
which is a property-based testing framework, like QuickCheck.

First, some utility functions to generate and render GlyphPositions
are provided in listing [[code:glyph-testing-1]].

# TODO remove most if not all of the boilerplate; keep enough to intro generative testing
# TODO this is in Test.Glyph
# TODO this one needs to be reformatted

#+name: code:glyph-testing-1
#+caption: Utility functions for testing bounding boxes.
#+BEGIN_SRC purescript
type ThreeGlyphs =
  { l :: GlyphPosition
  , c :: GlyphPosition
  , r :: GlyphPosition}

renderGlyphs :: ThreeGlyphs
             -> String
renderGlyphs {l,c,r} =
     "{ l: " <> show l
  <> ", c:"  <> show c
  <> ", r:"  <> show r <> "}"

genGlyphPosition :: Gen GlyphPosition
genGlyphPosition = do
  let cf = toNumber <$>
             chooseInt (-10000000) (10000000)
  min <- cf
  max <- cf
  minY <- cf
  maxY <- cf
  pure $ GlyphPosition { min, max, minY, maxY }

genThreeGlyphs :: Gen ThreeGlyphs
genThreeGlyphs = do
  l <- genGlyphPosition
  c <- genGlyphPosition
  r <- genGlyphPosition
  pure $ {l, c, r}
#+END_SRC

The law all semigroups should abide is associativity. In Jack, we
describe a Property asserting that parentheses don't matter for equality,
in listing [[code:glyph-testing-2]].

# TODO this one needs to be reformatted
#+name: code:glyph-testing-2
#+caption: Property testing the semigroup laws.
#+BEGIN_SRC purescript
prop_semigroup :: Property
prop_semigroup =
  forAllRender renderGlyphs genThreeGlyphs
      \pos -> property $
          (pos.l <> pos.c) <> pos.r ==
           pos.l <> (pos.c <> pos.r)
#+END_SRC

In addition, monoids require that the identity element in fact
be left and right identity. Listing [[code:glyph-testing-3]] shows
the definition of this property.

#+name: code:glyph-testing-3
#+caption: Property testing the monoid law.
#+BEGIN_SRC purescript
prop_monoid :: Property
prop_monoid =
  forAll genGlyphPosition \pos ->
    property $ (pos <> mempty == pos) &&
               (mempty <> pos == pos)
#+END_SRC

Jack then takes care of generating GlyphPositions, ensuring that these
properties hold.

# TODO test output

** Glyphs from PureScript to Biodalliance

With these interpreters, we can create a function that produces a JS object
that is compatible with BD. BD expects a glyph to have:

1. a function to draw the glyph to a provided canvas
2. a function to export the glyph to SVG
3. functions that provide the bounding box
4. optionally the relevant feature, or data point, that was used to produce the glyph



To do this, we exploit the fact that PS records are JS objects, by
constructing a record with the appropriate properties, and transform
it to a `Foreign` value. The main function in its entirety is
given in listing [[code:glyph-together-1]].

# TODO actually this code is garbage code and should be rewritten (that's how I transformed a feature to a record?!)

# TODO this one needs to be reformatted
#+name: code:glyph-together-1
#+caption: Composing transformations to create BD-compatible data.
#+BEGIN_SRC purescript
writeGlyph' :: forall a c r.
               Maybe (Feature c r)
            -> Glyph a
            -> Foreign
writeGlyph' f g =
  toForeign
    { "draw": unsafePerformEff <<< \ctx -> Canvas.renderGlyph ctx g
    , "min": const p.min
    , "max": const p.max
    , "minY": const p.minY
    , "maxY": const p.maxY
    , "feature": f'
    , "toSVG": unsafePerformEff <<< \_ -> SVG.renderGlyph g
    }
  where p = unwrap $ glyphToGlyphPosition g
        f' = toNullable $
               (\(Feature chr min max _) -> {chr, min, max}) <$> f
#+END_SRC

Note the use of `const` to produce the constant functions that
describe the bounding box, after converting the `Glyph` to a
`GlyphPosition`, and `unsafePerformEff` to create functions that use
the canvas and SVG interpreters to produce the output expected by BD.
Since the `feature` field is optional, `toNullable` is used to
transform an eventual `Nothing` to an actual JS null, before being
placed in the record.

A helper function exists for working with `Glyphs` in the `F` functor,
which is useful when the `Glyphs` were constructed in the process of
parsing externally provided data. In case of failure, we produce a
`String` containing the errors, which is the format expected by BD.
This function is given in listing [[code:glyph-together-2]].

# TODO this one needs to be reformatted
#+name: code:glyph-together-2
#+caption: Helper function for creating glyphs.
#+BEGIN_SRC purescript
writeGlyph :: forall a c r.
              Maybe (Feature c r)
           -> F (Glyph a)
           -> Foreign
writeGlyph f fG = case runExcept fG of
  Left errors ->
    toForeign $ fold
      $ renderForeignError <$> errors
  Right glyph -> writeGlyph' f glyph
#+END_SRC

In short, `writeGlyph` produces data, including possible errors, in
exactly the format expected by BD, while staying type safe.


** Summary

The biggest problem with BD's representation of glyphs is code duplication
and difficulty of composition. If one wants to create a new glyph, several
functions must be written, all very similar. Likewise, a change to a glyph
requires making the same change in many places. To a more extreme extent,
a modification to the browser in general may require rewriting or adding
another method to each of the glyphs. That is, the size of the required
changes is proportional to the number of different glyphs.

The solution used by GGB avoids all of these problems. Creating new
glyphs is simple and pleasant by using the Free monad DSL. Glyphs
created in this manner are "first class," and can be used to create
other glyphs, and so on. If a new way of using a glyph is desired, one
need only write an interpreter for each of the glyph primitives, and
the number of primitives is likely to remain constant. If a new
primitive is to be added, the size of the required changes is
proportional to the ways in which glyphs can be used, which is quite
tractable.

There are more transformations required in GGB. Here we were concerned
with transformations from data to tangible representations of data;
in the next section, the problem of transforming events produced by
different browsers is faced.
