* Glyphs
A value of type Glyph represents instructions for defining some graphical glyph,
using a set of primitives:

#+BEGIN_SRC purescript
type Point = { x :: Number, y :: Number }

data GlyphF a =
    Circle Point Number a
  | Line Point Point a
  | Rect Point Point a
  | Stroke String a
  | Fill String a
  | Path (Array Point) a

derive instance functorGlyph :: Functor GlyphF

data Free f a = Pure a
              | Bind f (Free f a)

type Glyph = Free GlyphF
#+END_SRC

(TODO: this is poorly worded -- it's not really "putting" GlyphF in "the" free monad...)
GlyphF is the type of the primitives, and putting it in the Free monad defines a
type that is a list of glyph primitives. Since it's a monad, we also can use
do-notation to create glyphs, after creating some helper functions:

#+BEGIN_SRC purescript
liftF :: forall f. f ~> (Free f)

circle :: Point -> Number -> Glyph Unit
circle p r = liftF $ Circle p r unit

stroke :: String -> Glyph Unit
stroke c = liftF $ Stroke c unit

-- and so on
#+END_SRC

`liftF` simply lifts a functor into the Free monad. Now, we can create arbitrarily
complex glyphs with an embedded DSL:

#+BEGIN_SRC purescript
crossedOut :: Point -> Number -> Glyph Unit
crossedOut p@{x,y} r = do
  circle p r
  line {x:x-r, y:y-r} {x:x+r, y:y+r}
  line {x:x-r, y:y+r} {x:x+r, y:y-r}
#+END_SRC

A Glyph, then, is simply a data structure. The interesting part lies in interpreting
this data structure; or, in other words, transforming it into another data structure,
one that *does* something. In fact, an interpreter consists of a natural transformation
from the GlyphF functor to some other functor.

An example is in order:

** Logging glyphs
It can be useful to print glyphs to the console, and the GlyphF.Log interpreter
lets us do that by turning Glyphs to Strings. To run an interpreter, we use foldFree:

#+BEGIN_SRC purescript
foldFree :: forall f m. MonadRec m => (f ~> m) -> (Free f) ~> m
#+END_SRC

The `MonadRec` constraint ensures that only monads supporting tail recursion can be
used. Without it stack safety would be a problem. The type operator ~> denotes a
natural transformation, it has the same meaning as:
#+BEGIN_SRC purescript
forall a. f a -> g a
#+END_SRC

That is, it is parametrically polymorphic mapping between functors, and so cannot
touch the contents of the functor.

For producing a String, the Writer type is a natural fit, and conveniently also
has a MonadRec instance. The type of the natural transformation is then:

#+BEGIN_SRC purescript
glyphLog :: GlyphF ~> Writer String
#+END_SRC

The definition of the function is also simple enough. For each primitive, write an
appropriate string, and return the contents of the functor:

#+BEGIN_SRC purescript
glyphLogN (Stroke c a)   = do
  tell $ "Set stroke style to " <> c
  pure a

glyphLog (Circle p r a) = do
  tell $ "Drawing circle at (" <> show p.x <> ", " <> show p.y <>
         ") with radius " <> show r <> "."
  pure a
-- similar for the rest
#+END_SRC

Running the interpreter consists of applying this natural transformation to the Free GlyphF,
using foldFree, and then getting the resulting String from the Writer. The function `showGlyph` nearly
writes itself at this point:

#+BEGIN_SRC purescript
execWriter :: forall w a. Writer w a -> w

showGlyph :: âˆ€ a. Glyph a -> String
showGlyph = execWriter <<< foldFree glyphLog
#+END_SRC


TODO add example input & output

** Drawing glyphs to canvas and SVG
-- offsetting? or is that just Feature

** Generating bounding boxes
-- intro GlyphPosition
-- point out monoid & show definition
-- testing monoid w/ Jack

** Putting it all together
