The construction of the UI of GGB is presented, beginning with a look
at some of the problems with BD's approach. After, the UI library used
in GGB is introduced, after which the components of the UI are
presented and composed, including using TrackSink and TrackSource for
communication between BD and Cy.js.


** Biodalliance
BD has a full-featured UI for exploring genomic data chromosome-wise,
adding and removing displayed tracks, configuring the browser, and
exporting the current view to publishable formats. BD accomplishes
this by creating and working with DOM elements and the HTML5 canvas
API, and setting handlers on DOM events such as clicking and dragging
the browser view, or pressing the arrow keys to scroll.

Because BD does not use any abstracting library for dealing with the DOM, and
likely because BD has grown features organically over time, the code for
updating the UI is interleaved with other code, including event handlers,
fetching data for a track, and more. BD also programmatically sets various CSS
properties on UI elements, and uses the web browser's computed stylesheet to
figure what manipulations are necessary.

In short, BD's UI uses plenty of global state, and is highly complex and
spread out over the codebase. Adding a UI element would require finding
a place in the DOM where it would fit -- both in screen estate as well
as in styling --  and somehow suture it into the code while making sure
that the existing UI elements are not negatively affected by this sudden
new element, plus that the other UI elements and functionality do not
interact with the element in some undesired manner.

Another problem, that could arise when adding some feature, not
necessarily modifying the UI itself, is the risk of the interface
ending up in an inconsistent state. With all the global state that is
used, both in the DOM and in the BD browser itself, it is difficult to
know what changes can be made. One cannot even call a function which
performs some action when a button is clicked, without risking that
the function itself toggles some state.

In PS, we do not juggle DOM elements and events. Instead, we use
Halogen, from \verb|purescript-halogen|, a type-safe UI library, similar in
purpose to React. Event passing between tracks is taken care of by
\verb|purescript-aff-bus| and threads from \verb|purescript-aff|, while DOM events
are handled by Halogen.

Using these tools, we can construct a potentially complex UI, with some,
albeit not absolute, confidence that the UI will not move to an inconsistent
state. Halogen also provides a DSL for declaratively constructing the
DOM of our application. Naturally, there is no implicit global state to
be concerned about.


** The Halogen library
Halogen is a component-based UI library, using a virtual DOM
implementation to render HTML to the browser. A component is a value
of the (fairly complicated) type Component (removed constraints etc.
for clarity), shown in listing [[code:ui-halogen-1]].

#+name: code:ui-halogen-1
#+caption: The basic halogen component type.
#+BEGIN_SRC purescript
component ::
  Component   -- (1)
    renderer  -- (2)
    query     -- (3)
    state     -- (4)
    message   -- (5)
    monad     -- (6)
#+END_SRC

The type \verb|Component| (1) takes five type parameters. The first,
\verb|renderer| (2) is the type used to render the page, we use a HTML
renderer. Next is \verb|query| (3), which is filled with our query
algebra, to be explained later; in short it is the set of commands the
component can respond to. \verb|state| (4) is the type of the state
kept by the component; we do not need any, and set it to \verb|Unit|.
\verb|message| (5) is the type of messages we can produce, which we
can send to other parts of the program. Finally, \verb|monad| (6) is
the type in which all effects produced by the component will happen.
In our case, it is the \verb|Aff| monad for asynchronous effects ---
it could also be a monad transformer stack, or some free monad.



*** Query algebras

The "Query algebra" is the type describing the possible actions we can query
the component to perform. The query algebra for the main component of GGB
is given in listing [[code:ui-algebras-1]].

#+name: code:ui-algebras-1
#+caption: The main browser query algebra.
#+BEGIN_SRC purescript
data Query a
  = CreateBD (HTMLElement
              -> Eff Biodalliance) a
  | PropagateMessage Message a
  | BDScroll Bp a
  | BDJump Chr Bp Bp a
  | CreateCy String a
  | ResetCy a
#+END_SRC

From top to bottom, we can ask it to \verb|CreateBD|, providing a function that
creates a BD instance given a HTML element to place it in;
we can propagate messages from the child components; we can scroll and
jump the BD instance; and we can create and reset the Cy.js instance.

Listing [[code:ui-algebras-2]] shows the type of the \verb|eval| function in
our main component. This is the function that maps queries to Halogen actions.

#+name: code:ui-algebras-2
#+caption: The type of the main component evaluation function.
#+BEGIN_SRC purescript
eval :: Query
     ~> HalogenM
          state
          query
          childQuery
          childSlot
          message
          monad
#+END_SRC

The type parameters of \verb|HalogenM| are the same as those of
\verb|Component|, adding a \verb|childQuery| type, the Query type of
values which this component can use to communicate with its children,
and \verb|childSlot|, the type which is used to index into the child
components. Listing [[code:ui-algebras-3]] shows those in the main GGB
component they are.

#+name: code:ui-algebras-3
#+caption: Main component child slot and query types.
#+BEGIN_SRC purescript
type ChildSlot = Either2 UIBD.Slot UICy.Slot

type ChildQuery = Coproduct2 UIBD.Query UICy.Query
#+END_SRC


Listing [[code:ui-algebras-5]] shows the start of the \verb|eval| function. We
pattern match on the input query, and produce effects in the HalogenM
type. Creating BD is done by querying the BD child using its
respective slot and a ChildPath --- a type describing a path to the
child component, and providing an action to tell the child component
to perform. \verb|H.action| is a Halogen
function mapping ChildQuery constructors to concrete actions, by simply
applying the \verb|Unit| type to it. Finally, the next command is returned.

#+name: code:ui-algebras-5
#+caption: Evaluation of `CreateBD` query.
#+BEGIN_SRC purescript
eval = case _ of
  CreateBD bd next -> do
    _ <- H.query'
           CP.cp1
           UIBD.Slot
           $ H.action (UIBD.Initialize bd)
    pure next
#+END_SRC


The next query is \verb|PropagateMessage|, which receives a Message sent
from the function handling messages from the children. The messages
handled by the main GGB component can be seen in listing [[code:ui-algebras-7]].

#+name: code:ui-algebras-7
#+caption: Messages handled by the GGB main component.
#+BEGIN_SRC purescript
data Message
  = BDInstance Biodalliance
  | CyInstance Cytoscape
#+END_SRC

The evaluation of \verb|PropagateMessage| is shown in listing
[[code:ui-algebras-8]]. Depending on which message it is, we print a log
message, and then use \verb|H.raise| to send the message out from Halogen.

#+name: code:ui-algebras-8
#+caption: Messages are handled by passing them along.
#+BEGIN_SRC purescript
  PropagateMessage msg next ->
    H.raise msg *> pure next
#+END_SRC

The rest are simple queries to the respective child component, practically
the same as \verb|CreateBD|. See listing [[code:ui-algebras-9]].

#+name: code:ui-algebras-9
#+caption: Most of the actions delegate to the BD and Cy.js components.
#+BEGIN_SRC purescript
  BDScroll dist next -> do
    _ <- H.query' CP.cp1 UIBD.Slot $ H.action (UIBD.Scroll dist)
    pure next
  BDJump chr xl xr next -> do
    _ <- H.query' CP.cp1 UIBD.Slot $ H.action (UIBD.Jump chr xl xr)
    pure next

  CreateCy div next -> do
    _ <- H.query' CP.cp2 UICy.Slot $ H.action (UICy.Initialize div)
    pure next
  ResetCy next -> do
    _ <- H.query' CP.cp2 UICy.Slot $ H.action UICy.Reset
    pure next
#+END_SRC

Now we have a Halogen component that knows exactly what to do,
however it cannot actually draw anything to the screen. This is
dealt with next.

*** Rendering
Rendering the component is done by providing a function from the
component \verb|state| to a description of the DSL used by the \verb|renderer|
type. In our case, we render to \verb|HTML|, and so use the type
\verb|ParentHTML|, which contains all the types required to interact with
the children, see listing [[code:ui-algebras-10]].

#+name: code:ui-algebras-10
#+caption: The type of the main rendering function.
#+BEGIN_SRC purescript
render :: State
       -> ParentHTML
            query
            childQuery
            childSlot
            m
#+END_SRC

The function itself is simple, constructing the HTML tree with arrays
of functions for creating HTML elements. Listing [[code:ui-algebras-11]]
shows a version simplified for brevity.

#+name: code:ui-algebras-11
#+caption: Subset of the main rendering function.
#+BEGIN_SRC purescript
render _ =
  HH.div_
    [ HH.button
      [  HE.onClick
           $ HE.input_
             $ BDScroll
               $ Bp (-1000000.0) ]
      [ HH.text "Scroll left 1MBp" ]

    , HH.div
      [] [HH.slot'
            CP.cp1
            UIBD.Slot
            UIBD.component
            unit
            handleBDMessage]
    ]
#+END_SRC

This produces a button with the text "Scroll left 1MBp", and clicking on it
sends a query to \verb|eval| to scroll the BD view 1 MBp to the left; as well as a
div with the BD child component. Adding the child component here is how we
create the component, so we must also provide a handler in the parent for
messages from the child, namely \verb|handleBDMessage|.

*** Messages
A component can send messages to its parent, or the rest of the application
in the case of the top-level component. The messages the BD and Cy.js
components can produce are shown in listing [[code:ui-messages-1]].

#+name: code:ui-messages-1
#+caption: Messages produced by BD and Cy.js components.
#+BEGIN_SRC purescript
data UIBD.Message
  = SendBD Biodalliance

data UICy.Output
  = SendCy Cytoscape
#+END_SRC

Note that the main container uses its own messages (from listing
[[code:ui-algebras-7]]) to propagate the children components; message
passing is limited by Halogen, and anything more complex than this
should be done on another channel. This is what is what GGB does with
events. The messages from the BD and Cy.js components are handled by
the functions \verb|handleBDMessage| and \verb|handleCyMessage| in listing
[[code:ui-messages-3]].

#+name: code:ui-messages-3
#+caption: Propagation of messages in main component.
#+BEGIN_SRC purescript
handleBDMessage :: UIBD.Message
                -> Maybe (Query Unit)
handleBDMessage (UIBD.SendBD bd) =
  Just $ H.action $ PropagateMessage (BDInstance bd)

handleCyMessage :: UICy.Output
                -> Maybe (Query Unit)
handleCyMessage (UICy.SendCy cy) =
  Just $ H.action $ PropagateMessage (CyInstance cy)
#+END_SRC

Note that these produce Queries on the main component. We want to send the
messages containing the references to the instances out from the component to
the outside application, hence creating a PropagateMessage query wrapping the
reference. As seen in \verb|eval| above, this in turn calls \verb|H.raise| on the
message, sending it to the outside world.

*** Creating the main component
These functions, including one to produce the initial state, are all
put together and provided to the \verb|parentComponent| function, producing
the Component itself. This can then be provided to Halogen's \verb|runUI|
function, along with the initial state and an HTML element to be
placed in, to create and run the Halogen component.

First, however, we need a main function application to run.

** The main application

Listing [[code:ui-main-1]] shows the type and beginning of the function
which will be called by the user to run the browser. It takes a
\verb|Foreign| object, the one to parse into a browser configuration, and
then does some effects in Eff. In our case, effects such as being a
genetics browser.

#+name: code:ui-main-1
#+caption: Type of the main function.
#+BEGIN_SRC purescript
main :: Foreign -> Eff Unit
main fConfig = HA.runHalogenAff do
#+END_SRC

In listing [[code:ui-main-2]] we attempt to parse the provided
configuration, logging all errors to config on failure, otherwise
continuing.

#+name: code:ui-main-2
#+caption: Running the browser configuration parser.
#+BEGIN_SRC purescript
case runExcept $ parseBrowserConfig fConfig of
  Left e -> liftEff $ do
    log "Invalid browser configuration:"
    sequence_ $ log <<< renderForeignError <$> e

  Right (BrowserConfig config) -> do
#+END_SRC

With a validated config, we can create the track/graph configs, and create
the function which will later be used to create Biodalliance, in listing [[code:ui-main-3]].

#+name: code:ui-main-3
#+caption: Validating tracks and reporting eventual errors.
#+BEGIN_SRC purescript
let {bdTracks, cyGraphs} = validateConfigs config.tracks

    opts' = sources := bdTracks.results <>
            renderers := config.bdRenderers

liftEff $ log $ "BDTrack errors: "
             <> foldMap ((<>) ", ") bdTracks.errors

liftEff $ log $ "CyGraph errors: "
             <> foldMap ((<>) ", ") cyGraphs.errors

let mkBd :: (HTMLElement -> Eff Biodalliance)
    mkBd = initBD opts' config.wrapRenderer config.browser
#+END_SRC

After picking the element to run in, we create the Halogen component,
and create the Buses to be used by the events system. This is shown in
listing [[code:ui-main-4]]. Note that we bind the value of \verb|runUI| to
\verb|io|. \verb|io| can be used to subscribe to messages sent from the main component,
as well as send queries to it, which we do momentarily.

#+name: code:ui-main-4
#+caption: Running the UI and creating event buses.
#+BEGIN_SRC purescript
io <- runUI component unit el'

busFromBD <- Bus.make
busFromCy <- Bus.make
#+END_SRC

In listing [[code:ui-main-5]] we use the provided TrackSink and
TrackSource configurations to create the BD TrackSink and TrackSource,
adding an error message if something went wrong.

#+name: code:ui-main-5
#+caption: Creating the BD TrackSink and TrackSource.
#+BEGIN_SRC purescript
bdTrackSink =
  makeTrackSinks <<< _.bdEventSinks =<<
    note "No BD event sinks configured" (config.events)
bdTrackSource =
  makeTrackSources <<< _.bdEventSources =<<
    note "No BD event sources configured" (config.events)
#+END_SRC

Finally, in listing [[code:ui-main-6]], we attach a callback to the Halogen component
to listen for the reference to the BD instance, sent by the BD component
upon creation. We then use the TrackSink and TrackSource configurations
to hook BD up to the event system. After that is set up, the main Halogen
component is told to initialize the BD browser.

#+name: code:ui-main-6
#+caption: Hooking of TrackSink and TrackSource and starting BD.
#+BEGIN_SRC purescript
io.subscribe $ CR.consumer $ case _ of
  BDInstance bd -> do

    case bdTrackSink of
      Left err -> liftEff $ log "No BD TrackSink!"
      Right ts -> forkTrackSink ts bd busFromCy *> pure unit

    liftEff $ case bdTrackSource of
      Left err -> log err
      Right ts -> subscribeBDEvents ts bd busFromBD

    pure Nothing

  _ -> pure $ Just unit

io.query $ H.action (CreateBD mkBd)
#+END_SRC

If the TrackSink was correctly configured, \verb|forkTrackSink|
is used to pipe events from the Cytoscape.js instance to the handler
defined by said TrackSink. \verb|forkTrackSink| returns a
\verb|Canceler| that can be used to kill the "thread", which is not
needed, so we throw it away with \verb|*> pure unit|.

Conversely, the TrackSource is used with the helper function
\verb|subscribeBDEvents|, defined in [[code:ui-main-7]]. It adds an event
listener to the provided BD browser instance and writes the successful
parses to the provided Bus.

#+name: code:ui-main-7
#+caption: Helper function to produce events from BD.
#+BEGIN_SRC purescript
subscribeBDEvents :: forall r.
                     (TrackSource Event)
                  -> Biodalliance
                  -> BusRW Event
                  -> Eff Unit
subscribeBDEvents h bd bus =
  Biodalliance.addFeatureListener bd \obj -> do
    let evs = runTrackSource h (unwrap obj)
    traverse_ (\x -> Aff.launchAff
                     $ Bus.write x bus) evs
#+END_SRC


The code to set up the Cy.js TrackSource and TrackSink, and the
Cy.js browser instance, is analogous, and elided.

\newpage

** Summary

The UI defined here wraps both BD and Cy.js, allows communication between
them and GGB, and does this in a type-safe manner. The tools provided by
Halogen makes it possible to construct complex UIs with a great degree
of correctness, and the \verb|Aff| monad makes it trivial to write asynchronous
code.
