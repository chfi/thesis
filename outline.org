* Name
something with transformations and purescript
both biological data & UI etc.
maybe something with composition

Transforming Data & Interactions with Purescript

Transforming Data & User Interactions with Purescript

Data and UI Transformations

Pure/Functional Data and UI Transformations

* Abstract
(needs much more)

Pure functional programming, using Purescript, is explored as a tool
to work with an existing legacy codebase written in Javascript, by writing
an application that extends the existing code while also being a fresh
start of something new.

* Introduction
** Notes
Describe what legacy code is and why it is a problem. How have people
attempted to solve/deal with it previously? And to what level of success?

Then present BD and the problems solved with using it, as well as the problems
it brings: works and easy to configure, but difficult to add new renderers, data
sources, communicate with; basically use in any new way

Technical debt and how it relates to BD

What we want, and how FP/PS may help -- my code is both an interface to
(extending) BD as well as the start of something new

TODO: Hypothesis

Should put a bigger focus on transformations; wrap everything else around that core

** Chapter summary
The concept of legacy code is introduced. How much of it there is in the world,
and how important it is -- how many vital systems run on (are!) legacy code.

The problems related to legacy code are introduced, as well as the ways people
and researchers have tried to solve them. OOP is introduced as an often-used
potential remedy.

It is brought up that technical debt and the problems of legacy code do not
appear to diminish despite OOP being very popular. Psychological issues related
to code understanding are connected to code maintenance and extension, and how
OOP fails to solve them (e.g. the number of concepts a person can hold in their
short-term memory vs the cascading complexity of inheritance).

Pure functional programming is introduced. It is argued that its virtues match
well with solving the problems of code understanding (mathematical concepts that
follow laws; provable correct programs; type-checking and semantically helpful
types, etc.), and that this may imply that it could help with legacy code.

Biodalliance is introduced as an example of a Javascript legacy codebase.
Examples on how we've wanted and tried to extend BD are given, along with the
related difficulties.

Purescript is introduced as a pure FP language that compiles to JS, and that the
FFI makes it useful for interacting with existing JS code.

The project is presented: Writing a new genome browser in Purescript, that makes
use of and extends Biodalliance. Intend to write an extensible and maintainable
codebase, touching as little of BD as possible, yet integrating it in a seamless
a way as possible.

The idea of focusing on transformations, which is naturally expressed using
functional programming, is introduced. Programming as composition of smaller
programs, indeed composition of transformations. Math concepts (functor, monoid)
provide combinators with relevant semantics and laws which generalize reasoning
across programs.

The thesis report will explain the architecture of the application, what choices
were made and why.


** Legacy code
*** Section summary


*** What is it

*** Why is it a problem

*** How have people tried to solve the problem previously
  (OOP)



** BD
*** Section summary
Describe Biodalliance
Legacy codebase - 14 years, tens of thousands of lines of JS

Bunch of ad-hoc solutions -> makes composition practically impossible,
in turn requiring writing new code, a dark spiral to unmaintainable code

** Background

*** Notes
Tie together the Legacy and BD sections (or move to have as subsections).

*** Section summary

Describes how functional programming can help solve the problems of legacy code.

Static types as reducing number of bugs, especially runtime errors.

The problems of maintenance and extensibility as viewed from a psychological
point of view -- a coder can only keep so many things in mind at once;
the farther a piece of code can "reach" (i.e. cause effects), the more
difficult it is to understand each piece of code, not to mention be
confident in what modifying it does. (Pure) FP solves these.

Static types as providing "mental scaffolding"; parametric polymorphism,
HKTs, free theorems as reducing cognitive overhead by either reducing
number of possible implementations, or automating writing of code.



*** How FP can help with legacy code
  composability on multiple levels -- functions as well as data structures

  Static types
    purity/referential transparency
      obviously makes it easier to modify & understand code

    parametric polymorphism
      free theorems maybe

    higher-kinded types
      easier to reason about large chunks of stuff

  Immutability

  ADTs


** Outro
The problems of legacy code have been introduced, along with how various
strengths of functional programming may help remedy them.

To test the idea that FP can be useful in this manner, a new genome browser
will be written, integrating with the existing Biodalliance browser.


* Method/Architecture/PS tutorial
** Notes
Describe the architecture of the PS browser, with a focus on transformations
and the interface to BD (the legacy codebase).

Want to describe the architecture module by module, but presented as answers
to the problems of interfacing with BD/transforming data. I.e. module-by-module,
but still in a natural way that follows the story of the report...

** Chapter summary
Purescript is given a somewhat more thorough introduction.

The desired functionality of the genome browser is given, and how the features
are in fact transformations of various inputs, with and without effects.

Fetching data is transforming a tuple (Chr, Bp, Bp) to something that produces
a value, then transforming that to something concrete, usable.

Visualizing data is mapping that value to a glyph, one or many of either (thus
potentially effectful). A glyph is itself a mapping of some feature/value to
effectful functions drawing it to canvas etc.

Detecting if a glyph was clicked is a mapping from click positions and bounding
boxes to a boolean ((X,Y) -> [GlyphPosition] -> Boolean).

UI can be viewed as an effectful state machine, with user interactions as edges
(this is how Halogen works). Recording user stats is wrapping the UI monad in
a writer transformer using an appropriate monoid.

Configuring the browser is a mapping from user configurations to a coproduct of
an initial UI state -- or potential errors. Each piece of the configuration is
itself a similar mapping; they compose, and so do the errors.

Events between tracks is transformations between unvalidated and validated JSON,
and mappings from validated JSON to effects.

Testing transformations, unit tests and property-based testing.

The code related to each transformation is detailed, covering more or less
the entire codebase.


** Genetics browser

*** Biodalliance
(can grab from GSOC blog)

**** Notes
Start here since the interface to (extending) BD is the beginning, if not the core,
of the project.

Describe how BD is represented in PS, and how the FFI is used to communicate with it.
Both calling BD API functions from PS, as well as providing functions/modules that
are shunted into and called by BD (renderers, fetchers/sources)

**** Section summary
The Purescript module/API to Biodalliance is briefly described. How the FFI is used
to instantiate and scroll the browser. Configuring it, validating BD track configurations
while staying backward compatible.

The basic architecture of a Biodalliance track is given. Source and renderer;
a pipeline from producer of feature to glyph.

Sources in greater detail -- something with a fetch(chr, min, max) function.
First Purescript addition: A higher-order function that creates new sources,
and how they are registered and used with BD. Examples are given, including
an IPFS source.

Adding renderers, requiring WrappedRenderer (or wait with that?)

**** Types/FFI API

**** Config
General BD options/renderers/sources
Tracks

**** Source
Implemented simple API that creates new sources given a function (Chr -> Bp -> Bp -> Aff _ a)
like 10 lines of code!

***** IPFS
As simple as writing a function (Chr -> Bp -> Bp -> Aff (ipfs :: IPFS) a)

**** Testing


*** Rendering for BD & Glyph(F)
**** Notes
Describe the overarching structure of BD's renderers; just an overview,
transforming features to glyphs

Problems with BD:
  glyphs are a bunch of different objects, and not composable
  the "essence" of each glyph is repeated many times:
    how to draw it to the canvas
    how to create an SVG representation of it
    how to create its bounding box

What we want: to create new BD-compatible glyphs, with as little code per glyph as possible
Solution: Free monad with Canvas, SVG, Bounding box interpreters


**** Section summary
Renderers are described in greater detail; the function prepareSubtiers() and
how it's all implicitly modifying the given Tier. The result being a property
"subtiers" with arrays of Glyphs.

The Glyph is introduced, along with the various functions BD expects one to have.

The problems of the BD glyphs are detailed: the opposite of DRY; difficult if not
impossible to compose; high risk of introducing bugs.

A free monad as solution to the problem of producing Glyphs that can be used by
BD while minimizing code repetition.

Free monads are given a brief introduction, along with the data structure that
defines the glyph DSL. The various interpreters are detailed.

Each interpreter of the DSL is tested separately, and each "command" of the
DSL data type is tested separately within each interpreter. The various laws
concerning each interpreter monad help guarantee correctness.

Two (probably) actual renderers are detailed as examples of using the DSL.



**** General architecture/BD interop
Features -> Glyphs
Addition to BD: WrappedRenderer


**** Feature
General representation of *anything* that exists on some contiguous length of a chromosome
Smart constructor to keep track of coordinates (Bp or MBp) when creating Features

Transformation: genome -> screen coordinate system, made trivial with (Bi)functor!

Other transformations can be applied to the other data equally trivially, thanks
to the right part of the bifunctor
(e.g. extract some values from it and leave just the Y-component to be mapped to
the screen by the glyph transformation in the renderer)

**** Free monad
How and why a free monad structure solves the problem (probably doesn't need much theory)

how do-notation lets us describe Glyphs in a wonderfully simple way,
and Free monads as DSLs

ease of testing -- test each part of each interpreter on its own

The guts of each interpreter; what monad each uses and why


***** Interpreters
****** Canvas
Eff (canvas :: CANVAS) Unit
****** Log (debug)
Writer String
****** Position
What is GlyphPosition? The monoid of minimal 2D bounding boxes
Writer GlyphPosition
****** SVG
StateT SVGContext (Writer (Array SVGElement))
****** Putting it together
transforming each interpreter into a JS function with the signature
BD expects a glyph to contain

serving an array of glyphs to BD


**** Testing
Describe the test of each interpreter

**** Renderers
***** GWAS
Using do-notation to describe a one-to-one mapping of features to glyphs,
e.g. map (Feature -> Glyph) on an Array Feature
***** Lineplot
Using a fold/catamorphism to describe a glyph which depends on many features,
e.g. an algebra, Array Feature -> Glyph

*** Units
**** Notes
Quick runthrough of the Chr, Bp, MBp newtypes, and why/how they've come in handy
when dealing with BD (at least Bp/MBp, since they're isomorphic and I added
a typeclass for that)

Maybe move to Glyph(F) or Renderer? The Feature and Biodalliance modules are where
they're used to the greatest effect.

**** Section summary
The advantage of using newtypes for units is noted, and the definitions of the
three used in the project are given.

Testing laws with property based testing is introduced (TODO probably fits
better under GlyphPosition test in Renderer section)

**** Testing
QuickCheck/Jack

*** Cytoscape.js
(can grab from GSOC blog)

**** Notes
Maybe combine this section with the BD API section; this is smaller, after all.

**** Section summary
Cytoscape.js is introduced, and why we use it.

The PS modules and types are briefly detailed;
the CyCollection type and related functions in particular.

**** Types/FFI API
**** Config

**** Testing

*** Events
**** Notes
Mapping arbitrary (JSON) events from BD, Cy.js, or whatever,
into user-defined schemas/templates (also JSON)

Calling user-defined functions on JSON events that have been parsed into templates

Runtime "type-checking" via comparing events to schemas -- TODO!


**** Section summary
The goal of having user-configurable events flow between different tracks
is detailed.

The types are introduced:
TrackSource, as a list of parsers (List (Json -> Maybe Event)).
TrackSink, as a map of potential actions (forall a. StrMap (Json -> a)).

The configuration of TrackSources and Sinks is given, in particular
how user-defined JSON is used as a template/schema for events,
and how Argonaut cursors (zippers) are used to extract and interact with them.

Briefly walk through the tests -- point out that as both TrackSource
and TrackSink are simple structures containing functions, they can
easily be tested; being pure by nature.

**** Types
**** TrackSource
**** TrackSink
**** Config
**** Manager

**** Testing

*** UI
(can grab from GSOC blog)

**** Notes
Quick intro to Halogen
Describe the various halogen components and how they work
the `main` function; parsing configs

Actually running the PS code, and configuring it from JS/HTML.
Integrating it with BD.


**** Section summary
Halogen is introduced, and the components making up the browser listed.

The threading together of all the pieces is described;
in the Eff monad, a transformation from single configuration object
to a product of track configurations, BD instance, and Cy.js instance;
forking of event listeners.

Changing the Halogen effect monad to do logging or track stats.

**** Halogen
**** BD
**** Cy.js

**** Testing
**** User stats?

** Graphics (maybe? probs not)
*** SVG?


** Outro
Most of the guts of the new browser have been described. We've shown how the
transformations that characterize the various desired features of the genome
browser have been implemented and tested in Purescript.

Many of the parts of the application are composed of smaller pieces that
combine using existing, mathematical and law-abiding combinators.

The UI ties it together, though the Cy.js and BD APIs are used elsewhere as well.

* Results
** Chapter summary
The browser as a product is shown.

Some data -- code metrics? -- are presented.

Number of modules, dependencies, tests.


** Outro


* Discussion
** Chapter summary
The benefits of the functional approach are discussed.

The positive and the negative of the approach of combining transformations
using various combinators and laws are discussed.

Problems include more difficult learning curve, and potentially difficult
to read code.

Benefits include greater certainty in that the code does what intended,
some level of proving correctness. Law-abiding concepts such as monoids,
functors, applicatives, etc. provide a framework of ideas that are
universal, and don't require understanding of the details; the abstractions
of FP reduce cognitive overhead of e.g. number of parts to keep in mind,
unlike OOP.



** Conclusion
